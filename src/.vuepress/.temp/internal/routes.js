export const redirects = JSON.parse("{\"/blogs/java/Spring%20Boot%20Admin%203.6.5%20+%20Spring%20Boot%203.3.0%20%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97.html\":\"/blogs/java/Spring%20Boot%20Admin%203.6.5%20_%20Spring%20Boot%203.3.0%20%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97.html\"}")

export const routes = Object.fromEntries([
  ["/", { loader: () => import(/* webpackChunkName: "index.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/index.html.js"), meta: {"title":"主页 | GGBOND","icon":"house"} }],
  ["/about/", { loader: () => import(/* webpackChunkName: "about_index.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/about/index.html.js"), meta: {"date":1747440000000,"cover":"/assets/images/cover3.jpg","excerpt":"\n<h2>🌟个人优势</h2>\n<ul>\n<li>具备扎实的 Java 基础与项目实践经验，参与多个后端模块独立开发与接口联调，理解常见业务流程与接口设计规范</li>\n<li>熟悉常用 Java 开发工具链及主流后端技术栈，能完成基础缓存优化、权限认证与接口调试等常规任务</li>\n<li>拥有前后端协作经验，了解 Vue3 + TypeScript，可独立完成前端调试与联调任务</li>\n<li>掌握 Git、Maven、Docker 等常用工具，能在 Linux 环境下进行部署与调试</li>\n<li>积极拥抱新技术，具备良好的自我驱动和学习能力，能够快速融入团队，适应项目节奏</li>\n</ul>","readingTime":{"minutes":2.3,"words":690},"title":"关于我","icon":"/assets/icon/关于我.png","type":"article"} }],
  ["/blogs/java/JavaSPI%E6%9C%BA%E5%88%B6%E8%AF%A6%E8%A7%A3%E4%B8%8E%E5%AE%9E%E8%B7%B5.html", { loader: () => import(/* webpackChunkName: "blogs_java_JavaSPI机制详解与实践.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/blogs/java/JavaSPI机制详解与实践.html.js"), meta: {"date":1760832000000,"category":["Java"],"excerpt":"<h2>1. 什么是Java SPI机制</h2>\n<p>SPI（Service Provider Interface）是Java提供的一种服务发现机制，用于在运行时动态加载和发现服务实现。它通过在classpath路径下的<code>META-INF/services</code>文件夹中配置接口的实现类，使得程序可以在运行时根据配置加载相应的实现。</p>\n<h3>1.1 SPI的核心思想</h3>\n<p>SPI机制的核心思想是<strong>解耦接口和实现</strong>。通过配置文件的方式，将接口的实现类完全交给第三方来实现，而不需要在代码中硬编码具体的实现类。这种机制使得框架具有良好的扩展性，开发者可以根据需要提供不同的实现。</p>","readingTime":{"minutes":4.66,"words":1397},"title":"Java SPI机制详解与在淘票票项目中的实践","type":"article"} }],
  ["/blogs/java/Reactor%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98.html", { loader: () => import(/* webpackChunkName: "blogs_java_Reactor响应式编程实战.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/blogs/java/Reactor响应式编程实战.html.js"), meta: {"date":1760745600000,"category":["Java"],"tag":["Reactor","Spring Cloud Gateway"],"excerpt":"<p>在微服务架构里，高并发场景就像“早高峰的地铁站”——传统同步编程的“排队检票”模式很容易堵死，而响应式编程的“异步分流”模式能让系统更高效地处理请求。作为Java响应式编程的“基石”，Reactor框架基于<strong>Reactive Streams规范</strong>和<strong>Java 8特性</strong>（Lambda、CompletableFuture）实现，底层还整合了Netty的非阻塞IO能力，专门解决“高并发下的资源浪费”问题；而Spring Cloud Gateway则基于Reactor，把这种能力落地到网关层，帮我们处理路由、过滤等核心需求。今天就从基础到实战，把Reactor和Gateway的核心逻辑讲明白，重点解答“请求体只能读一次”“重新创建的Flux为何能重复订阅”这些高频坑。</p>","readingTime":{"minutes":18.9,"words":5669},"title":"Reactor响应式编程实战:从Flux|Mono到Spring Cloud Gateway应用","type":"article"} }],
  ["/blogs/java/", { loader: () => import(/* webpackChunkName: "blogs_java_index.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/blogs/java/index.html.js"), meta: {"readingTime":{"minutes":0.04,"words":12},"title":"Java","order":2,"type":"article"} }],
  ["/blogs/java/Spring%20Boot%20Admin%203.6.5%20_%20Spring%20Boot%203.3.0%20%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97.html", { loader: () => import(/* webpackChunkName: "blogs_java_Spring Boot Admin 3.6.5 _ Spring Boot 3.3.0 实践指南.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/blogs/java/Spring Boot Admin 3.6.5 _ Spring Boot 3.3.0 实践指南.html.js"), meta: {"date":1759017600000,"category":["Java"],"excerpt":"<p>本文记录了 <strong>Spring Boot Admin (SBA) 3.6.5</strong> 在 <strong>Spring Boot 3.3.0</strong> 环境下的实践过程，结合 <strong>Nacos 服务注册</strong>，并解决了 <code>InstanceId</code> 序列化错误的问题。文章包含完整的 <strong>项目依赖、application.yml 配置、核心代码</strong> 和 <strong>运行效果说明</strong>。</p>\n<h2>一、项目环境</h2>\n<table>\n<thead>\n<tr>\n<th>项目组件</th>\n<th>版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Spring Boot</td>\n<td>3.3.0</td>\n</tr>\n<tr>\n<td>Spring Boot Admin Server</td>\n<td>3.6.5</td>\n</tr>\n<tr>\n<td>Spring Boot Admin Client</td>\n<td>3.6.5</td>\n</tr>\n<tr>\n<td>Spring Cloud Alibaba Nacos</td>\n<td>2023.0.1.0</td>\n</tr>\n<tr>\n<td>Java</td>\n<td>17+</td>\n</tr>\n<tr>\n<td>Maven</td>\n<td>3.9+</td>\n</tr>\n</tbody>\n</table>","readingTime":{"minutes":2.83,"words":850},"title":"Spring Boot Admin 3.6.5 + Spring Boot 3.3.0 实践指南（集成 Nacos & InstanceId JSON 修复）","type":"article"} }],
  ["/blogs/java/Spring%20Boot%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E6%9C%BA%E5%88%B6%E4%B8%8E%E7%BB%84%E4%BB%B6%E6%89%AB%E6%8F%8F.html", { loader: () => import(/* webpackChunkName: "blogs_java_Spring Boot自动配置机制与组件扫描.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/blogs/java/Spring Boot自动配置机制与组件扫描.html.js"), meta: {"date":1758585600000,"category":["Java"],"excerpt":"<h2>引言</h2>\n<p>Spring Boot 的核心优势之一就是“开箱即用”的自动配置，它极大地减少了开发者的配置负担。同时，Spring 本身的 <strong>组件扫描机制</strong> 也是我们日常开发中必不可少的工具。<br>\n这两种机制都能帮助我们注册 Bean，但在实现方式、使用场景和演进方向上有明显区别。本文将从 <strong>Spring Boot 自动配置机制的演进</strong> 出发，结合 <strong>自动配置与组件扫描的差异</strong>，为你梳理一条完整的理解路径。</p>\n<h2>一、Spring Boot 自动配置机制演进</h2>\n<h3>1. 旧方式：<code>spring.factories</code></h3>","readingTime":{"minutes":3.16,"words":948},"title":"Spring Boot自动配置机制与组件扫描：演进、区别与最佳实践","type":"article"} }],
  ["/blogs/java/Spring%20Cloud%20Gateway%20%E5%93%8D%E5%BA%94%E8%BF%87%E6%BB%A4%E5%99%A8%E5%AE%9E%E6%88%98%EF%BC%9A%E4%BB%8E%E5%8E%9F%E7%90%86%E5%88%B0%E8%90%BD%E5%9C%B0%EF%BC%88%E5%90%AB%E4%B8%8ESpring%20MVC%E5%AE%8C%E6%95%B4%E5%AF%B9%E6%AF%94%EF%BC%89%20.html", { loader: () => import(/* webpackChunkName: "blogs_java_Spring Cloud Gateway 响应过滤器实战：从原理到落地（含与Spring MVC完整对比） .html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/blogs/java/Spring Cloud Gateway 响应过滤器实战：从原理到落地（含与Spring MVC完整对比） .html.js"), meta: {"date":1760745600000,"category":["Java"],"tag":["Reactor","Spring Cloud Gateway"],"excerpt":"<p>在微服务架构中，网关是请求和响应的“必经之路”。处理响应体（如加密、校验、脱敏）是网关的高频需求，但很多开发者会困惑：“为什么我配置的响应过滤器，看似在控制器前执行？”“order值和执行阶段到底是什么关系？”更会疑惑：“Gateway的过滤器和Spring MVC的拦截器有什么区别？该怎么选？”</p>\n<h2>一、基础认知：Gateway与Spring MVC的核心定位差异</h2>\n<p>在对比过滤器之前，先明确两者的本质区别——定位不同决定了过滤器的设计逻辑不同：</p>\n<table>\n<thead>\n<tr>\n<th>框架</th>\n<th>定位</th>\n<th>核心场景</th>\n<th>底层依赖</th>\n<th>数据处理模式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Spring Cloud Gateway</td>\n<td>微服务网关（跨服务）</td>\n<td>路由转发、跨服务鉴权、全局响应处理</td>\n<td>Netty（非阻塞IO）</td>\n<td>响应式流（Flux/Mono）</td>\n</tr>\n<tr>\n<td>Spring MVC</td>\n<td>单体/服务内部控制器</td>\n<td>服务内请求处理、接口级拦截</td>\n<td>Servlet API（阻塞IO）</td>\n<td>同步请求响应</td>\n</tr>\n</tbody>\n</table>","readingTime":{"minutes":9.07,"words":2721},"title":"Spring Cloud Gateway 响应过滤器实战：从原理到落地（含与Spring MVC完整对比）","type":"article"} }],
  ["/blogs/java/%E4%BB%8EAOP%E6%80%9D%E6%83%B3%E5%88%B0%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%EF%BC%9A%E6%8F%AD%E7%A7%98%E6%B7%98%E7%A5%A8%E7%A5%A8%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E7%9A%84%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0.html", { loader: () => import(/* webpackChunkName: "blogs_java_从AOP思想到动态代理：揭秘淘票票分布式锁的底层实现.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/blogs/java/从AOP思想到动态代理：揭秘淘票票分布式锁的底层实现.html.js"), meta: {"date":1760832000000,"category":["Java"],"excerpt":"<p>切面编程（AOP）是分布式系统中用于<strong>解耦横切关注点</strong>的核心技术，而动态代理正是AOP实现的底层引擎。在淘票票项目中，我们通过AOP结合动态代理实现了分布式锁的无侵入式集成，既让业务代码保持简洁，又解决了并发安全问题。</p>\n<p>本文将从AOP思想出发，深入讲解JDK动态代理与CGLIB动态代理的原理，并结合淘票票的分布式锁实现，完整展示从原理到实践的全过程。</p>\n<hr>\n<h2>一、AOP思想：为什么要“横向切入”？</h2>\n<p>在传统的面向对象编程（OOP）中，业务逻辑通常按照“纵向”划分，例如支付、下单、退款等。但日志记录、事务控制、安全校验这些功能，会横向地出现在各个业务中：</p>","readingTime":{"minutes":5.79,"words":1738},"title":"从AOP思想到动态代理：揭秘淘票票分布式锁的底层实现","type":"article"} }],
  ["/blogs/java/%E5%A4%8D%E5%90%88%E6%A0%A1%E9%AA%8C%E4%B8%8E%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8.html", { loader: () => import(/* webpackChunkName: "blogs_java_复合校验与布隆过滤器.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/blogs/java/复合校验与布隆过滤器.html.js"), meta: {"date":1758240000000,"category":["Java"],"excerpt":"<p>比如在高并发系统中，用户注册是一个典型的高风险操作：</p>\n<ul>\n<li>同一个手机号可能被重复提交</li>\n<li>数据校验逻辑复杂</li>\n<li>数据库频繁查询可能成为性能瓶颈</li>\n</ul>\n<p>为了应对这些挑战，本篇笔记总结了 <strong>复合校验（Composite Check）</strong> 和 <strong>布隆过滤器（Bloom Filter）</strong> 在注册场景中的应用实践。</p>\n<h2>1️⃣ 注册方法解析</h2>\n<p>以 <code>register(UserRegisterDto userRegisterDto)</code> 方法为例：</p>","readingTime":{"minutes":4.51,"words":1352},"title":"复合校验与布隆过滤器实践","type":"article"} }],
  ["/blogs/java/%E6%A8%A1%E5%9D%97%E8%AE%BE%E8%AE%A1.html", { loader: () => import(/* webpackChunkName: "blogs_java_模块设计.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/blogs/java/模块设计.html.js"), meta: {"date":1747785600000,"category":["Java"],"excerpt":"\n<p>在企业级开发中，为了提高代码复用率、分工协作效率以及系统的可维护性，Java 项目通常采用 <strong>多模块（multi-module）架构</strong>。本篇将从模块划分思路出发，介绍如何进行合理的模块组织，并讲解 Maven 的依赖管理方式。</p>\n<h2>一、模块如何划分？</h2>\n<p>模块划分需遵循 <strong>高内聚、低耦合、职责单一</strong> 的原则，常见方式包括：</p>\n<h3>1. 业务维度划分</h3>\n<ul>\n<li><code>user-service</code>：用户注册、登录、信息管理等功能</li>\n<li><code>order-service</code>：订单创建、支付、状态流转等功能</li>\n<li><code>payment-service</code>：支付接口、交易记录等</li>\n<li><code>inventory-service</code>：库存管理、锁库存、减库存等</li>\n</ul>","readingTime":{"minutes":3.57,"words":1071},"title":"模块设计","type":"article"} }],
  ["/blogs/linux/CentOS%E6%A0%B9%E5%88%86%E5%8C%BA%E6%89%A9%E5%AE%B9%E5%AE%9E%E6%88%98.html", { loader: () => import(/* webpackChunkName: "blogs_linux_CentOS根分区扩容实战.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/blogs/linux/CentOS根分区扩容实战.html.js"), meta: {"date":1758672000000,"category":["Linux"],"excerpt":"<p>在日常使用 Linux 虚拟机时，经常会遇到这样的问题：虚拟机磁盘分配了几十个 G，但实际根分区 <code>/</code> 却只有十几 G，用不了多久就满了，导致 Docker、Elasticsearch 等服务无法正常运行。</p>\n<p>这篇文章记录了我在一台 <strong>RHEL/CentOS 7</strong> 系统上，将根分区 <code>/</code> 从 <strong>22G 扩展到 78G</strong> 的完整过程。</p>\n<h2>一、问题背景</h2>\n<p>执行 <code>df -h</code>，发现 <code>/</code> 分区已经 100% 用满：</p>","readingTime":{"minutes":2.26,"words":678},"title":"CentOS/RHEL 根分区扩容实战：从 22G 扩展到 78G","type":"article"} }],
  ["/blogs/linux/", { loader: () => import(/* webpackChunkName: "blogs_linux_index.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/blogs/linux/index.html.js"), meta: {"readingTime":{"minutes":0.04,"words":12},"title":"Linux","order":5,"type":"article"} }],
  ["/blogs/bug/pip%E5%AE%89%E8%A3%85%E5%8C%85%E5%90%8Escript%E5%8C%85%E4%B8%8B%E6%97%A0exe%E6%96%87%E4%BB%B6.html", { loader: () => import(/* webpackChunkName: "blogs_bug_pip安装包后script包下无exe文件.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/blogs/bug/pip安装包后script包下无exe文件.html.js"), meta: {"date":1748995200000,"category":["BUG"],"tag":["Python","Windows"],"excerpt":"<h2>一、问题描述</h2>\n<p>在 Windows 系统中使用 <code>pip</code> 安装第三方库时，遇到以下两个相关问题，故此记录一下：</p>\n<ol>\n<li>使用 <code>pip install</code> 安装后没有生成对应的 <code>.exe</code> 执行文件（如 <code>xxx.exe</code> 无法找到），而使用 <code>pip3</code> 却能正常生成。</li>\n<li>执行 <code>pip install</code> 安装某些库时报错：</li>\n</ol>\n<div class=\"language-error line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"error\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code class=\"language-error\"><span class=\"line\"><span>Could not install packages due to an OSError: \\[WinError 2] 系统找不到指定的文件。</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div>","readingTime":{"minutes":1.04,"words":312},"title":"解决 pip 安装 Script目录下没有生成 .exe 文件和 \"Could not install packages due to an OSError: [WinError 2]\" 报错","type":"article"} }],
  ["/blogs/bug/", { loader: () => import(/* webpackChunkName: "blogs_bug_index.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/blogs/bug/index.html.js"), meta: {"readingTime":{"minutes":0.04,"words":12},"title":"Bug","order":6,"type":"article"} }],
  ["/blogs/bug/springsecurity%E9%85%8D%E7%BD%AE%E4%BA%86%E9%80%9A%E8%BF%87%E7%99%BB%E9%99%86%E6%8E%A5%E5%8F%A3%E4%BB%8D%E7%84%B6403.html", { loader: () => import(/* webpackChunkName: "blogs_bug_springsecurity配置了通过登陆接口仍然403.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/blogs/bug/springsecurity配置了通过登陆接口仍然403.html.js"), meta: {"date":1749427200000,"category":["BUG"],"tag":["Spring"],"excerpt":"<h2>一、问题描述</h2>\n<p>在使用 Spring Security 进行权限控制时，即便已配置放行登录接口，如 <code>/student/login</code>，访问时仍然返回 <strong>403 Forbidden</strong> 错误。</p>\n<p><br>\n</p>\n<p>这使得前端无法完成用户登录流程，严重影响开发进度。</p>\n<h2>二、原因分析</h2>\n<p>通过排查，最终发现 <strong>不是权限配置的问题</strong>，而是因为：</p>\n<ul>\n<li>启动类所在模块未正确扫描到包含 <code>@RestController</code> 的模块；</li>\n<li>导致 <code>Controller</code> 未被加载进 Spring 容器，自然也无法响应请求；</li>\n<li>Spring Security 拦截未识别请求路径，默认返回 403。</li>\n</ul>","readingTime":{"minutes":2.27,"words":682},"title":"Spring Security 配置了登录接口仍然返回 403 的问题排查","type":"article"} }],
  ["/blogs/bug/%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8.html", { loader: () => import(/* webpackChunkName: "blogs_bug_虚拟机无法启动.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/blogs/bug/虚拟机无法启动.html.js"), meta: {"date":1749427200000,"category":["BUG"],"tag":["Linux"],"excerpt":"<h2>一、问题描述</h2>\n<p>在启动 CentOS 虚拟机时，系统报错：</p>\n<div class=\"language- line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code class=\"language-\"><span class=\"line\"><span></span></span>\n<span class=\"line\"><span>/dev/mapper/rhel-root does not exist</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","readingTime":{"minutes":2.36,"words":709},"title":"虚拟机开机报错：/dev/mapper/rhel-root does not exist","type":"article"} }],
  ["/blogs/bug/%E8%A7%A3%E5%86%B3%20AsyncRequestNotUsableException%20%E5%BC%82%E5%B8%B8.html", { loader: () => import(/* webpackChunkName: "blogs_bug_解决 AsyncRequestNotUsableException 异常.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/blogs/bug/解决 AsyncRequestNotUsableException 异常.html.js"), meta: {"date":1758672000000,"category":["BUG"],"excerpt":"<h3>1️⃣ 现象</h3>\n<p>你在日志里看到的异常：</p>\n<div class=\"language- line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code class=\"language-\"><span class=\"line\"><span>AsyncRequestNotUsableException: ServletOutputStream failed to flush</span></span>\n<span class=\"line\"><span>IllegalStateException: A non-container thread attempted to use the AsyncContext</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","readingTime":{"minutes":1.33,"words":398},"title":"解决 AsyncRequestNotUsableException 异常","type":"article"} }],
  ["/blogs/bug/%E8%A7%A3%E5%86%B3%20MySQL%20%E8%87%AA%E5%A2%9E%E9%95%BF%20ID%20%E4%B8%8D%E6%8C%89%E9%A1%BA%E5%BA%8F%E9%97%AE%E9%A2%98.html", { loader: () => import(/* webpackChunkName: "blogs_bug_解决 MySQL 自增长 ID 不按顺序问题.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/blogs/bug/解决 MySQL 自增长 ID 不按顺序问题.html.js"), meta: {"date":1750032000000,"category":["BUG"],"tag":["MySQL"],"excerpt":"<p>在开发过程中，<code>AUTO_INCREMENT</code> 字段在数据库中通常用作主键，自增长的 <code>id</code> 是数据库表中非常常见的设计。然而，在一些情况下，我们可能会遇到 ID 不按顺序递增的问题。今天，我们将介绍如何解决这个问题，确保数据库中的 <code>id</code> 按照顺序自增长。</p>\n<h2>1. 问题描述</h2>\n<p>我们在使用 MyBatis-Plus 插入数据时，发现数据库中的 <code>id</code> 字段并没有按照预期的顺序自增长。这种情况往往发生在数据库的字段类型不正确，或者在修改表结构时没有正确更新自增长计数器。</p>","readingTime":{"minutes":3.13,"words":940},"title":"解决 MySQL 自增长 ID 不按顺序问题","type":"article"} }],
  ["/blogs/bug/%E8%A7%A3%E5%86%B3%20Spring%20Boot%20Admin%20%E7%B3%BB%E5%88%97%E6%8A%A5%E9%94%99%EF%BC%9A%E4%BB%8E%20InstanceId%20%E5%B5%8C%E5%A5%97%E5%88%B0%20Instant%20%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84%E5%85%A8%E6%B5%81%E7%A8%8B%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95.html", { loader: () => import(/* webpackChunkName: "blogs_bug_解决 Spring Boot Admin 系列报错：从 InstanceId 嵌套到 Instant 序列化的全流程踩坑记录.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/blogs/bug/解决 Spring Boot Admin 系列报错：从 InstanceId 嵌套到 Instant 序列化的全流程踩坑记录.html.js"), meta: {"date":1758931200000,"category":["BUG"],"excerpt":"\n<p>在基于 Spring Boot Admin（SBA）搭建微服务监控系统时，经常会遇到两类典型问题：一是 SBA 前端因 InstanceId 嵌套导致路径拼接错误，二是 Jackson 无法处理 Java 8 日期类型 <code>Instant</code> 引发的序列化异常。本文将从问题现象出发，逐步分析原因，提供可直接复用的解决方案，并总结同类问题的排查思路。</p>\n<h2>一、问题背景与环境说明</h2>\n<ul>\n<li><strong>技术栈</strong>：Spring Boot 3.3.0 + Spring Boot Admin 3.3.0 + Nacos 2.3.0</li>\n<li><strong>核心场景</strong>：通过 SBA 从 Nacos 自动发现微服务实例，实现健康监控与指标采集</li>\n<li><strong>问题集合</strong>：\n<ol>\n<li>SBA 前端路径显示 <code>[object Object]</code>，如 <code>http://localhost:10082/instances/[object%20Object]/details</code></li>\n<li>Jackson 序列化报错：<code>Java 8 date/time type java.time.Instant not supported by default</code></li>\n<li>自定义 Jackson 配置后，出现 <code>withFormat</code> 方法访问权限异常</li>\n</ol>\n</li>\n</ul>","readingTime":{"minutes":3.64,"words":1093},"title":"解决SpringBootAdmin点击实例时跳转路径错误，详情页空白","type":"article"} }],
  ["/blogs/%E5%89%8D%E7%AB%AF/axio%E6%8B%A6%E6%88%AA%E4%B8%8E%E8%AF%B7%E6%B1%82%E5%B0%81%E8%A3%85.html", { loader: () => import(/* webpackChunkName: "blogs_前端_axio拦截与请求封装.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/blogs/前端/axio拦截与请求封装.html.js"), meta: {"date":1749686400000,"category":["前端开发"],"tag":["vue","TS"],"excerpt":"<p>在实际开发中，我们经常会对 <code>axios</code> 进行统一封装，比如：统一设置请求头、添加 token、全局处理响应错误信息等。本文将介绍如何使用 <code>axios</code> 拦截器，配合 TypeScript 进行请求封装，提高代码的可维护性和复用性。</p>\n<h2>一、为什么需要封装 axios？</h2>\n<p>在实际开发中，我们通常需要处理以下问题：</p>\n<ul>\n<li>每个请求都需要携带 token</li>\n<li>处理请求失败或权限过期等错误</li>\n<li>重复的请求配置代码</li>\n<li>响应数据格式统一解包</li>\n</ul>","readingTime":{"minutes":2.43,"words":728},"title":"Axios 拦截器与请求封装实战（Vue3 + TypeScript）","type":"article"} }],
  ["/blogs/%E5%89%8D%E7%AB%AF/deploy.html", { loader: () => import(/* webpackChunkName: "blogs_前端_deploy.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/blogs/前端/deploy.html.js"), meta: {"date":1747440000000,"category":["前端开发"],"tag":["vuepress-theme-reco"],"excerpt":"<p>本文将详细介绍如何将使用 VuePress 构建的博客部署到 GitHub Pages 上，包括本地构建、生成静态文件、推送到 <code>gh-pages</code> 分支以及自定义域名绑定等。</p>\n<h2>一、前提条件</h2>\n<p>在开始部署之前，请确保你已经完成了以下准备工作：</p>\n<ul>\n<li>已经搭建好 VuePress 项目并可本地正常访问</li>\n<li>已将博客项目推送至 GitHub 仓库（如：<code>https://github.com/你的用户名/你的仓库名</code>）</li>\n<li>安装了 Node.js 和 Git</li>\n<li>本地可正常构建 VuePress 静态文件</li>\n</ul>","readingTime":{"minutes":2.34,"words":701},"title":"将 VuePress 博客部署到 GitHub Pages 的完整流程","type":"article"} }],
  ["/blogs/%E5%89%8D%E7%AB%AF/firstblog.html", { loader: () => import(/* webpackChunkName: "blogs_前端_firstblog.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/blogs/前端/firstblog.html.js"), meta: {"date":1747440000000,"category":["前端开发"],"tag":["vue","vuepress-theme-reco"],"excerpt":"<h2>✅ 一、基础环境准备</h2>\n<h3>1. 安装 Node.js 和 npm</h3>\n<p>前往官网下载 <a href=\"https://nodejs.org/zh-cn/\" target=\"_blank\" rel=\"noopener noreferrer\">Node.js LTS 版本</a>，安装后终端执行：</p>\n<div class=\"language-bash line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code class=\"language-bash\"><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">node</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> -v</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">npm</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> -v</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","readingTime":{"minutes":1.38,"words":413},"title":"我的第一篇博客-搭建个人博客网站","type":"article"} }],
  ["/blogs/%E5%89%8D%E7%AB%AF/JavaScript%20%E4%B8%AD%20async%20%E4%B8%8E%20await%20%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8%E8%AF%A6%E8%A7%A3.html", { loader: () => import(/* webpackChunkName: "blogs_前端_JavaScript 中 async 与 await 的原理及应用详解.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/blogs/前端/JavaScript 中 async 与 await 的原理及应用详解.html.js"), meta: {"date":1749772800000,"category":["前端开发"],"tag":["JS"],"excerpt":"<p>在JavaScript异步编程领域，<code>async</code>和<code>await</code>是极为重要的语法特性。它们基于Promise和Generator函数，为异步操作提供了更简洁、易读的语法，极大地改善了开发者处理异步任务的体验。本文将深入剖析<code>async</code>和<code>await</code>的原理、执行机制以及实际应用场景。</p>\n<h2>一、async与await基础概念</h2>\n<p><code>async</code>是用于声明异步函数的关键字，它返回的是一个<code>Promise</code>对象。<code>await</code>则只能在<code>async</code>函数内部使用，用于等待一个<code>Promise</code>对象的状态变为<code>fulfilled</code>或<code>rejected</code> ，并获取其结果。示例代码如下：</p>","readingTime":{"minutes":3.44,"words":1032},"title":"JavaScript 中 async 与 await 的原理及应用详解","type":"article"} }],
  ["/blogs/%E5%89%8D%E7%AB%AF/", { loader: () => import(/* webpackChunkName: "blogs_前端_index.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/blogs/前端/index.html.js"), meta: {"readingTime":{"minutes":0.07,"words":21},"title":"前端开发","order":7,"type":"article"} }],
  ["/blogs/%E5%89%8D%E7%AB%AF/Vue%203%20%E4%B8%AD%E7%BB%84%E4%BB%B6%E6%97%A0%20export%20%E5%8D%B4%E8%83%BD%E8%A2%AB%E7%9B%B4%E6%8E%A5%E5%BC%95%E7%94%A8%E4%BD%BF%E7%94%A8%E7%9A%84%E5%8E%9F%E5%9B%A0.html", { loader: () => import(/* webpackChunkName: "blogs_前端_Vue 3 中组件无 export 却能被直接引用使用的原因.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/blogs/前端/Vue 3 中组件无 export 却能被直接引用使用的原因.html.js"), meta: {"date":1749513600000,"category":["前端开发"],"tag":["vue"],"excerpt":"\n<h2>引言</h2>\n<p>在 Vue 3 项目中，有时会发现一个组件（如 <code>Bar.vue</code>）似乎没有显式的 <code>export</code> 语句，却能在其他组件中通过 <code>&lt;Bar /&gt;</code> 直接引用使用。这种现象可能让人困惑。本文将分析其原因，并提供验证和解决方法。</p>\n<h2>问题背景</h2>\n<p>假设有一个组件 <code>src/components/Bar.vue</code>，其内容如下：</p>\n<div class=\"language-vue line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"vue\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code class=\"language-vue\"><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">template</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  &lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">div</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;这是一个 Bar 组件&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">div</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">template</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">script</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  // 没有 export default</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">script</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","readingTime":{"minutes":3.03,"words":909},"title":"Vue 3 中组件无 export 却能被直接引用使用的原因","type":"article"} }],
  ["/blogs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5.html", { loader: () => import(/* webpackChunkName: "blogs_前端_前端日志配置管理最佳实践.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/blogs/前端/前端日志配置管理最佳实践.html.js"), meta: {"date":1749600000000,"category":["前端开发"],"tag":["vue"],"excerpt":"<h2>引言</h2>\n<p>在前端开发中，日志管理是调试、监控和优化应用的重要部分。传统的 <code>console.log</code> 方法虽然简单，但缺乏结构化和集中管理的能力。本文将介绍如何使用现有的日志库 <code>pino</code> 在前端项目中实现统一的日志管理，代码设计为通用性强，适用于 Vue、React 等框架，并结合 VuePress 格式展示。</p>\n<h2>为什么需要日志管理？</h2>\n<ul>\n<li><strong>调试效率</strong>：结构化日志便于快速定位问题。</li>\n<li><strong>用户体验</strong>：通过通知提示用户错误。</li>\n<li><strong>监控与分析</strong>：支持本地存储或发送到后端。</li>\n</ul>","readingTime":{"minutes":2.55,"words":764},"title":"前端日志配置管理最佳实践","type":"article"} }],
  ["/blogs/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/Grafana.html", { loader: () => import(/* webpackChunkName: "blogs_基本概念_Grafana.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/blogs/基本概念/Grafana.html.js"), meta: {"date":1760832000000,"category":["基本概念"],"excerpt":"<h2>一、什么是 Grafana</h2>\n<p>Grafana 是一个 <strong>开源的数据可视化与监控分析平台</strong>，用于将各种数据源（如 Prometheus、InfluxDB、Elasticsearch、MySQL 等）中的监控数据以图表、仪表盘、告警面板的形式动态展示出来。</p>\n<p>通俗来说，<strong>Prometheus 负责采集与存储监控数据，而 Grafana 负责把这些数据“画”出来</strong>。<br>\n它是现代运维监控体系中最常用的可视化工具之一，尤其在云原生与微服务架构中应用广泛。</p>\n<hr>\n<h2>二、Grafana 的核心特点</h2>","readingTime":{"minutes":3.77,"words":1132},"title":"Grafana","type":"article"} }],
  ["/blogs/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/Lua%E8%84%9A%E6%9C%AC.html", { loader: () => import(/* webpackChunkName: "blogs_基本概念_Lua脚本.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/blogs/基本概念/Lua脚本.html.js"), meta: {"date":1760832000000,"category":["基本概念"],"tag":["多线程"],"excerpt":"<h2>一、什么是 Lua 脚本</h2>\n<p>Lua 是一种轻量级的脚本语言。Redis 从 2.6 版本开始内置了对 Lua 的支持，允许我们把一段逻辑写成 Lua 脚本，一次性提交给 Redis 服务器执行。</p>\n<h2>二、Lua 脚本的作用</h2>\n<p>Lua 脚本在 Redis 中的主要作用是 <strong>将多条命令封装为一个原子操作执行</strong>。这意味着脚本中的所有 Redis 命令会在一次执行中完成，不会被其他客户端的命令打断，从而保证数据操作的一致性和完整性。</p>\n<p>它常用于以下场景：</p>\n<ol>\n<li><strong>原子操作</strong>：在高并发环境下确保关键业务逻辑不被其他请求干扰，比如秒杀、库存扣减。</li>\n<li><strong>减少网络开销</strong>：客户端只需一次请求即可完成多条命令执行。</li>\n<li><strong>逻辑复用</strong>：在 Redis 端处理逻辑，减少客户端逻辑复杂度。</li>\n<li><strong>性能提升</strong>：执行脚本的效率通常高于多条命令连续执行。</li>\n</ol>","readingTime":{"minutes":3.05,"words":915},"title":"Lua脚本","type":"article"} }],
  ["/blogs/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/Prometheus.html", { loader: () => import(/* webpackChunkName: "blogs_基本概念_Prometheus.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/blogs/基本概念/Prometheus.html.js"), meta: {"date":1760832000000,"category":["基本概念"],"excerpt":"<h2>一、什么是 Prometheus</h2>\n<p>Prometheus 是一个 <strong>开源的系统监控与告警工具</strong>，由 SoundCloud 于 2012 年开发，并在 2015 年成为 CNCF（云原生计算基金会）托管项目。<br>\n它以时间序列数据库（Time Series Database, TSDB）为核心，用于采集、存储和查询各种指标数据，是云原生监控体系中最重要的组件之一。</p>\n<p>通俗来说，Prometheus 就是一个能“自动拉取监控数据、保存历史指标、支持灵活查询和告警”的监控平台。</p>\n<hr>\n<h2>二、Prometheus 的核心特点</h2>","readingTime":{"minutes":3.34,"words":1001},"title":"Prometheus","type":"article"} }],
  ["/blogs/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/", { loader: () => import(/* webpackChunkName: "blogs_基本概念_index.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/blogs/基本概念/index.html.js"), meta: {"readingTime":{"minutes":0.07,"words":21},"title":"基本概念","order":1,"type":"article"} }],
  ["/blogs/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/Sentinel.html", { loader: () => import(/* webpackChunkName: "blogs_基本概念_Sentinel.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/blogs/基本概念/Sentinel.html.js"), meta: {"date":1760832000000,"category":["基本概念"],"excerpt":"<h2>一、什么是 Sentinel</h2>\n<p>Sentinel（哨兵）是 Redis 官方提供的 <strong>高可用（High Availability）解决方案</strong>，主要用于 <strong>监控主从集群的运行状态</strong>，并在主节点出现故障时自动完成 <strong>故障转移（Failover）</strong>。</p>\n<p>简单来说，Sentinel 是 Redis 的“监控者”和“指挥官”，它能够在主节点宕机时自动选出新的主节点，保证 Redis 服务的持续可用。</p>\n<hr>\n<h2>二、Sentinel 的核心功能</h2>\n<ol>\n<li>\n<p><strong>监控（Monitoring）</strong><br>\nSentinel 会不断地检查主节点（master）和从节点（slave）的运行状态，判断节点是否在线。</p>\n</li>\n<li>\n<p><strong>通知（Notification）</strong><br>\n一旦检测到节点故障，Sentinel 会通过消息通知系统管理员或其他应用程序。</p>\n</li>\n<li>\n<p><strong>自动故障转移（Automatic Failover）</strong><br>\n当主节点被判定为不可用时，Sentinel 会自动将一个从节点提升为新的主节点，并通知其他从节点和客户端进行切换。</p>\n</li>\n<li>\n<p><strong>配置中心（Configuration Provider）</strong><br>\nSentinel 会动态更新主节点信息，客户端可以通过 Sentinel 获取当前主节点的地址，实现自动连接切换。</p>\n</li>\n</ol>","readingTime":{"minutes":3.61,"words":1083},"title":"Sentinel","type":"article"} }],
  ["/blogs/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/%E5%85%AC%E5%B9%B3%E9%94%81.html", { loader: () => import(/* webpackChunkName: "blogs_基本概念_公平锁.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/blogs/基本概念/公平锁.html.js"), meta: {"date":1760832000000,"category":["基本概念"],"excerpt":"<h2>一、什么是公平锁</h2>\n<p>公平锁（Fair Lock）是一种按照 <strong>线程请求锁的先后顺序</strong> 来分配锁资源的机制。<br>\n简单来说，<strong>谁先申请锁，谁就先获得锁</strong>，像排队买票一样遵循“先来先得”的原则。</p>\n<p>在多线程环境下，公平锁能够确保每个线程都有机会依次获得锁，避免线程“饿死”（长期得不到执行机会）。</p>\n<hr>\n<h2>二、公平锁与非公平锁的区别</h2>\n<table>\n<thead>\n<tr>\n<th>对比项</th>\n<th>公平锁（Fair Lock）</th>\n<th>非公平锁（Non-Fair Lock）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>获取顺序</td>\n<td>按请求先后顺序（FIFO）获取锁</td>\n<td>新线程可直接竞争锁，可能插队成功</td>\n</tr>\n<tr>\n<td>公平性</td>\n<td>高（不会饿死线程）</td>\n<td>低（可能长期抢不到锁）</td>\n</tr>\n<tr>\n<td>性能</td>\n<td>略低（需维护等待队列）</td>\n<td>较高（减少排队调度开销）</td>\n</tr>\n<tr>\n<td>使用场景</td>\n<td>对公平性要求高的业务</td>\n<td>对性能要求高的业务</td>\n</tr>\n</tbody>\n</table>","readingTime":{"minutes":3.23,"words":968},"title":"公平锁","type":"article"} }],
  ["/blogs/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/%E5%8F%AF%E9%87%8D%E5%85%A5%E9%94%81.html", { loader: () => import(/* webpackChunkName: "blogs_基本概念_可重入锁.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/blogs/基本概念/可重入锁.html.js"), meta: {"date":1760832000000,"category":["基本概念"],"excerpt":"<h2>一、什么是可重入锁</h2>\n<p>可重入锁（Reentrant Lock）是一种允许同一个线程 <strong>重复获取同一把锁</strong> 的锁机制。<br>\n简单来说，当一个线程已经持有了某个锁，它在未释放该锁之前再次请求同一锁时，系统会允许它继续获取，而不会被阻塞或死锁。</p>\n<hr>\n<h2>二、为什么需要可重入锁</h2>\n<p>在多线程编程中，<strong>一个线程可能在调用某个同步方法时，又间接调用了另一个也需要同一把锁的同步方法</strong>。如果没有可重入机制，线程会因为再次尝试获取自己已持有的锁而陷入死锁。</p>\n<p>例如：</p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code class=\"language-java\"><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> synchronized</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> methodA</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">() {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">    System</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">out</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">println</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"Method A\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    methodB</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">()</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> // 这里再次请求同一把锁</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> synchronized</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> methodB</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">() {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">    System</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">out</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">println</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"Method B\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","readingTime":{"minutes":3.05,"words":914},"title":"可重入锁","type":"article"} }],
  ["/blogs/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8.html", { loader: () => import(/* webpackChunkName: "blogs_基本概念_布隆过滤器.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/blogs/基本概念/布隆过滤器.html.js"), meta: {"date":1760832000000,"category":["基本概念"],"excerpt":"<h2>一、什么是布隆过滤器</h2>\n<p>布隆过滤器（Bloom Filter）是一种 <strong>高效的概率型数据结构</strong>，用于判断一个元素是否存在于集合中。<br>\n它的核心特点是：</p>\n<ul>\n<li>判断“<strong>一定不存在</strong>”是准确的；</li>\n<li>判断“<strong>可能存在</strong>”是有一定误差的（即存在误判率）。</li>\n</ul>\n<p>因此，布隆过滤器非常适合用于 <strong>快速判断元素是否存在</strong> 的场景，而不需要真正存储所有元素。</p>\n<hr>\n<h2>二、布隆过滤器的工作原理</h2>","readingTime":{"minutes":3.44,"words":1033},"title":"布隆过滤器","type":"article"} }],
  ["/blogs/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/%E7%BA%A2%E9%94%81.html", { loader: () => import(/* webpackChunkName: "blogs_基本概念_红锁.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/blogs/基本概念/红锁.html.js"), meta: {"date":1760832000000,"category":["基本概念"],"tag":["多线程","Redis"],"excerpt":"<h2>一、什么是红锁（Redlock）</h2>\n<p>红锁（Redlock）是 Redis 官方提出的一种 <strong>分布式锁算法</strong>，由 Redis 的作者 Antirez 设计。它是基于 Redis 单机版分布式锁（即 <code>SET key value NX PX expireTime</code>）的改进版本，旨在在分布式系统中提供更高可靠性和安全性的锁机制。</p>\n<p>简单来说，<strong>红锁是为了解决单节点 Redis 锁在主从复制、网络分区等情况下可能出现的锁安全问题</strong>，让分布式环境下的锁具备更高的容错性与一致性保障。</p>","readingTime":{"minutes":4.14,"words":1241},"title":"红锁","type":"article"} }],
  ["/blogs/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/%E8%AF%BB%E5%86%99%E9%94%81.html", { loader: () => import(/* webpackChunkName: "blogs_基本概念_读写锁.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/blogs/基本概念/读写锁.html.js"), meta: {"date":1760832000000,"category":["基本概念"],"tag":["多线程"],"excerpt":"<h2>一、什么是读写锁</h2>\n<p>读写锁（Read-Write Lock）是一种比普通互斥锁（Mutex）更细粒度的并发控制机制。它允许多个线程 <strong>同时读取共享资源</strong>，但在有线程执行写操作时，会 <strong>独占锁</strong>，阻塞其他读写线程。</p>\n<p>读写锁通常包含两种状态：</p>\n<ol>\n<li><strong>读锁（共享锁，Read Lock）</strong>：多个线程可以同时获取读锁，前提是没有线程持有写锁。</li>\n<li><strong>写锁（独占锁，Write Lock）</strong>：当线程持有写锁时，其他线程无法再获取任何锁（无论是读锁还是写锁）。</li>\n</ol>","readingTime":{"minutes":3.65,"words":1094},"title":"读写锁","type":"article"} }],
  ["/blogs/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/%E8%B7%A8%E5%AE%9E%E4%BE%8B.html", { loader: () => import(/* webpackChunkName: "blogs_基本概念_跨实例.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/blogs/基本概念/跨实例.html.js"), meta: {"date":1760832000000,"category":["基本概念"],"tag":["多线程"],"excerpt":"<p>在分布式系统中，“跨实例”指的是<strong>多个独立部署的服务进程（实例），在协作处理同一任务或操作同一资源时的交互场景</strong>。简单说，就是“你的代码不是只在一台机器/一个进程里跑，而是在多台机器/多个进程里跑，这些进程之间需要协同工作”——这也是分布式系统区别于单体系统的核心特征，更是分布式锁要解决的核心问题。</p>\n<h3>一、先理解“实例”：什么是服务实例？</h3>\n<p>在解释“跨实例”前，先明确“实例”的概念：<br>\n当你把一个Java服务（如淘票票的支付服务）打包成Jar/War包后，<strong>每启动一次这个Jar包，就生成一个“服务实例”</strong>。每个实例拥有独立的内存空间、线程池，运行在独立的进程中（甚至不同的服务器上）。</p>","readingTime":{"minutes":4.29,"words":1288},"title":"跨实例","type":"article"} }],
  ["/blogs/%E6%95%B0%E6%8D%AE%E5%BA%93/", { loader: () => import(/* webpackChunkName: "blogs_数据库_index.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/blogs/数据库/index.html.js"), meta: {"readingTime":{"minutes":0.05,"words":16},"title":"数据库","order":3,"type":"article"} }],
  ["/blogs/%E6%95%B0%E6%8D%AE%E5%BA%93/SQL%20%E4%B8%AD%E7%9A%84%20CTE%20%E4%B8%8E%20CASE%20WHEN.html", { loader: () => import(/* webpackChunkName: "blogs_数据库_SQL 中的 CTE 与 CASE WHEN.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/blogs/数据库/SQL 中的 CTE 与 CASE WHEN.html.js"), meta: {"date":1748304000000,"category":["数据库"],"tag":["MYSQL"],"excerpt":"\n<h2>CTE（Common Table Expression:公共表表达式）</h2>\n<h3>概念</h3>\n<p>CTE是一种临时命名的查询结果集，它允许我们在一个查询语句中多次引用。CTE在查询语句中定义，仅在该查询语句执行期间存在，就像是一个临时搭建的“舞台”，专门为当前查询服务。CTE通常用于简化复杂的查询，将一个大的查询逻辑拆分成多个小的、可管理的部分，从而提高查询的可读性和可维护性。</p>\n<h3>语法结构</h3>\n<div class=\"language-sql line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"sql\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code class=\"language-sql\"><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">WITH</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> cte_name </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">AS</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    SELECT</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> ...  </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">-- CTE的查询逻辑，定义这个临时结果集的内容</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">SELECT</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> ... </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">FROM</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> cte_name;  </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">-- 在主查询中使用CTE，就像使用一个普通的表一样</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","readingTime":{"minutes":3.91,"words":1173},"title":"SQL 中的 CTE 与 CASE WHEN","type":"article"} }],
  ["/blogs/%E6%95%B0%E6%8D%AE%E5%BA%93/SQL%20%E5%87%BD%E6%95%B0%E5%88%86%E7%B1%BB%E5%8F%8A%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF.html", { loader: () => import(/* webpackChunkName: "blogs_数据库_SQL 函数分类及使用场景.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/blogs/数据库/SQL 函数分类及使用场景.html.js"), meta: {"date":1747785600000,"category":["数据库"],"tag":["MYSQL"],"excerpt":"<p>在日常开发中，MySQL 内置了大量函数，掌握常见函数的分类及使用场景，有助于提升 SQL 编写效率与可读性。</p>\n<h2>一、字符串函数</h2>\n<p>用于处理文本内容，常见于数据清洗、字符串拼接、截取等场景。</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>说明</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>CONCAT(a, b)</code></td>\n<td>字符串拼接</td>\n<td><code>CONCAT('A', 'B') → 'AB'</code></td>\n</tr>\n<tr>\n<td><code>SUBSTRING(s, start, len)</code></td>\n<td>截取子串</td>\n<td><code>SUBSTRING('hello', 2, 3) → 'ell'</code></td>\n</tr>\n<tr>\n<td><code>REPLACE(s, a, b)</code></td>\n<td>替换子串</td>\n<td><code>REPLACE('a-b-c', '-', '_') → 'a_b_c'</code></td>\n</tr>\n<tr>\n<td><code>LENGTH(s)</code></td>\n<td>字节长度（与字符集相关）</td>\n<td><code>LENGTH('中') → 3（UTF-8下）</code></td>\n</tr>\n<tr>\n<td><code>TRIM(s)</code></td>\n<td>去除首尾空格</td>\n<td><code>TRIM(' abc ') → 'abc'</code></td>\n</tr>\n</tbody>\n</table>","readingTime":{"minutes":2.76,"words":827},"title":"MySQL 函数分类及使用场景","type":"article"} }],
  ["/blogs/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%B8%85%E7%A9%BA%E8%A1%A8%E6%95%B0%E6%8D%AE.html", { loader: () => import(/* webpackChunkName: "blogs_数据库_清空表数据.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/blogs/数据库/清空表数据.html.js"), meta: {"date":1749772800000,"category":["数据库"],"tag":["MYSQL"],"excerpt":"<p>在 SQL 中，清空表数据有两种主要方式：<code>TRUNCATE TABLE</code> 和 <code>DELETE FROM</code>。它们的功能和适用场景有所不同，下面为你详细介绍：</p>\n<h3>一、使用 <code>TRUNCATE TABLE</code>（推荐快速清空）</h3>\n<p><strong>语法</strong>：</p>\n<div class=\"language-sql line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"sql\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code class=\"language-sql\"><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">TRUNCATE</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> TABLE</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> table_name;</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div>","readingTime":{"minutes":1.78,"words":535},"title":"清空表数据","type":"article"} }],
  ["/blogs/%E6%95%B0%E6%8D%AE%E5%BA%93/%E8%A1%A8%E7%9A%84%E8%AE%BE%E8%AE%A1.html", { loader: () => import(/* webpackChunkName: "blogs_数据库_表的设计.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/blogs/数据库/表的设计.html.js"), meta: {"date":1747872000000,"category":["数据库"],"tag":[""],"excerpt":"<h2>数据库表设计笔记</h2>\n<h3>一、需求分析</h3>\n<ul>\n<li><strong>明确业务场景</strong>：确定系统需存储的数据类型（如用户、商品、订单等）。</li>\n<li><strong>梳理数据关系</strong>：分析数据关联（一对一/一对多/多对多）。</li>\n</ul>\n<h3>二、表结构设计</h3>\n<h4>1. 划分主题表</h4>\n<ul>\n<li>每张表围绕单一主题（如「用户表」「商品表」），避免混合无关数据。</li>\n</ul>\n<h4>2. 定义字段</h4>\n<ul>\n<li><strong>业务适配</strong>：字段需覆盖业务需求，避免冗余或缺失（例：用户表含<code>userId</code>、<code>userName</code>、<code>phone</code>）。</li>\n<li><strong>命名与类型</strong>：\n<ul>\n<li>命名规范（如驼峰式：<code>orderTime</code>）；</li>\n<li>类型匹配（如整数用<code>INT</code>，文本用<code>VARCHAR</code>）。</li>\n</ul>\n</li>\n</ul>","readingTime":{"minutes":3.38,"words":1015},"title":"数据库表设计","type":"article"} }],
  ["/blogs/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/", { loader: () => import(/* webpackChunkName: "blogs_算法设计_index.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/blogs/算法设计/index.html.js"), meta: {"readingTime":{"minutes":0.08,"words":24},"title":"算法设计","order":7,"type":"article"} }],
  ["/blogs/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95.html", { loader: () => import(/* webpackChunkName: "blogs_算法设计_常见算法.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/blogs/算法设计/常见算法.html.js"), meta: {"date":1748995200000,"tag":["算法设计"],"excerpt":"<hr>\n<h2>一、双指针（Two Pointers）</h2>\n<h3>定义</h3>\n<p>使用两个指针变量在数组或链表中按特定规则同时遍历，常用于解决有序数组、字符串或链表的问题。</p>\n<h3>使用场景</h3>\n<ul>\n<li>查找有序数组中两个数的和（对撞指针）</li>\n<li>删除重复元素、快慢指针问题</li>\n<li>合并有序数组或链表</li>\n</ul>\n<h3>实现方式（Java）</h3>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code class=\"language-java\"><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> boolean</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> twoSum</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#C678DD\">int</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">[] nums</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> int</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> target) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> left </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> right </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> nums</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">length</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> -</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    while</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> (left </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> right) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> sum </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> nums[left] </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">+</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> nums[right]</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> (sum </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> target) </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">return</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> true</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        else</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> (sum </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> target) left</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">++;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        else</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> right</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">--;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    return</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> false</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","readingTime":{"minutes":4.01,"words":1203},"title":"常用算法技巧总结","type":"article"} }],
  ["/blogs/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/docker.html", { loader: () => import(/* webpackChunkName: "blogs_开发工具_docker.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/blogs/开发工具/docker.html.js"), meta: {"date":1749427200000,"category":["开发工具"],"tag":["Docker"],"excerpt":"\n<p>Docker 是一种轻量级容器技术，能够将应用及其依赖打包在一起，在任何支持 Docker 的环境中快速运行，极大地简化了部署流程。</p>\n<h2>一、Docker 基础概念</h2>\n<ul>\n<li><strong>镜像（Image）</strong>：Docker 镜像是容器的模板，可以理解为一个完整的操作系统快照。</li>\n<li><strong>容器（Container）</strong>：镜像运行起来就是容器，是镜像的一个运行实例。</li>\n<li><strong>仓库（Repository）</strong>：用来存储镜像的地方，分为公共仓库（如 Docker Hub）和私有仓库。</li>\n<li><strong>Dockerfile</strong>：定义如何构建镜像的脚本。</li>\n</ul>","readingTime":{"minutes":2.06,"words":618},"title":"Docker的使用","icon":"/assets/icon/docker.png","type":"article"} }],
  ["/blogs/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/IDEA%20%E8%B0%83%E8%AF%95%E5%A4%9A%E4%B8%AA%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%85%A8%E6%94%BB%E7%95%A5%EF%BC%9A%E4%BB%8E%E6%9C%AC%E5%9C%B0%E8%81%94%E8%B0%83%E5%88%B0%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83.html", { loader: () => import(/* webpackChunkName: "blogs_开发工具_IDEA 调试多个微服务全攻略：从本地联调到生产环境.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/blogs/开发工具/IDEA 调试多个微服务全攻略：从本地联调到生产环境.html.js"), meta: {"date":1760745600000,"category":["开发工具"],"tag":["IDEA"],"excerpt":"<p>在微服务架构中，跨服务调试是开发人员的“必修课”——一个请求可能涉及 5~10 个服务的调用，任何一个环节出错都可能导致整个链路失败。本文将结合 <strong>IDEA 调试功能</strong>和 <strong>生产级实践</strong>，详细讲解如何高效调试多个微服务，重点解决“请求链断裂”“服务依赖冲突”“远程调试安全”等核心问题。</p>\n<h2>一、调试前的准备：环境与配置</h2>\n<p>在开始调试前，必须确保以下基础条件满足，否则可能遇到“断点不触发”“服务不可达”等问题。</p>\n<h3>1. 统一代码版本</h3>\n<ul>\n<li><strong>本地与远程一致</strong>：通过 Git 等版本控制系统确保本地代码与远程服务器代码完全一致，否则调试时可能出现“代码行错位”。</li>\n<li><strong>分支管理</strong>：建议在 <strong>feature 分支</strong>调试，避免污染主分支。调试完成后通过 Pull Request 合并代码。</li>\n</ul>","readingTime":{"minutes":5.19,"words":1557},"title":"IDEA 调试多个微服务全攻略：从本地联调到生产环境","type":"article"} }],
  ["/blogs/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/idea.html", { loader: () => import(/* webpackChunkName: "blogs_开发工具_idea.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/blogs/开发工具/idea.html.js"), meta: {"date":1747872000000,"category":["开发工具"],"tag":["IDEA"],"excerpt":"<p><strong>ctrl+f12:</strong> 查看该类的所有方法</p>\n<p><strong>ALT+7：</strong> 打开“Structure”面板，展示类的结构，包括字段、方法及继承关系。</p>\n<p><strong>CTRL+O：</strong> 调出可重写父类方法列表，便于快速实现方法重写。</p>\n<p><strong>Ctrl+Shift+R：</strong> 全局替换</p>\n<p><strong>Ctrl+F12</strong>：查看当前文件的结构，会在一个弹出窗口中列出当前文件中的类、方法、变量等，可通过该窗口快速浏览和定位方法。</p>\n<p><strong>Ctrl+E</strong>：查看最近打开的文件列表，若之前打开过包含目标方法的文件，可通过此快捷键快速切换到该文件，进而浏览方法。</p>","readingTime":{"minutes":1.08,"words":323},"title":"IDEA中常用的快捷键","icon":"/assets/icon/intellijidea.png","type":"article"} }],
  ["/blogs/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/nginx%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html", { loader: () => import(/* webpackChunkName: "blogs_开发工具_nginx常用命令.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/blogs/开发工具/nginx常用命令.html.js"), meta: {"date":1749427200000,"category":["开发工具"],"tag":["Docker"],"excerpt":"<h2>Nginx 常用命令</h2>\n<h3>1. 查看 Nginx 是否安装成功</h3>\n<div class=\"language-bash line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code class=\"language-bash\"><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">nginx</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> -v</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div>","readingTime":{"minutes":0.86,"words":257},"title":"Nginx 的常用命令","type":"article"} }],
  ["/blogs/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/", { loader: () => import(/* webpackChunkName: "blogs_开发工具_index.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/blogs/开发工具/index.html.js"), meta: {"readingTime":{"minutes":0.07,"words":21},"title":"开发工具","order":4,"type":"article"} }],
  ["/blogs/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/%E4%BB%8E0%E5%88%B01%E5%AE%9E%E7%8E%B0OCS%E8%84%9A%E6%9C%AC%E5%AF%B9%E6%8E%A5%E6%9C%AC%E5%9C%B0FastAPI%E6%9C%8D%E5%8A%A1%EF%BC%9A%E8%87%AA%E5%8A%A8%E7%AD%94%E9%A2%98%E9%A2%98%E5%BA%93%E9%85%8D%E7%BD%AE%E5%85%A8%E6%94%BB%E7%95%A5.html", { loader: () => import(/* webpackChunkName: "blogs_开发工具_从0到1实现OCS脚本对接本地FastAPI服务：自动答题题库配置全攻略.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/blogs/开发工具/从0到1实现OCS脚本对接本地FastAPI服务：自动答题题库配置全攻略.html.js"), meta: {"excerpt":"\n<p>在日常学习或工作中，我们经常会遇到各类需要答题的场景，手动搜索答案不仅效率低，还容易出错。<br>\n本文将带你一步步搭建本地 FastAPI 服务，集成 <strong>火山引擎方舟大模型</strong>（Doubao 系列），并通过 <strong>OCS 脚本</strong> 实现自动答题功能。<br>\n全程覆盖：环境配置、服务开发、题库对接、API Key 管理与问题排查。</p>\n<hr>\n<h2>一、项目背景与核心架构</h2>\n<h3>1. 需求场景</h3>\n<p>我们需要实现一个“自动答题系统”，核心目标包括：</p>\n<ul>\n<li>本地搭建 API 服务，对接火山方舟大模型；</li>\n<li>支持 OCS 脚本调用，实现自动识别题目并获取答案；</li>\n<li>内置题库与缓存，避免重复请求模型；</li>\n<li>不再依赖系统环境变量，使用 <code>.env</code> 文件管理密钥。</li>\n</ul>","readingTime":{"minutes":10.19,"words":3057},"title":"从0到1实现OCS脚本对接本地FastAPI服务","type":"article"} }],
  ["/blogs/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8git%E6%8B%89%E5%8F%96%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E6%9C%80%E6%96%B0%E6%96%87%E4%BB%B6%E4%B8%8E%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E7%9A%84%E6%96%87%E4%BB%B6%E5%AF%B9%E6%AF%94%E5%90%88%E5%B9%B6.html", { loader: () => import(/* webpackChunkName: "blogs_开发工具_如何使用git拉取远程仓库最新文件与本地仓库的文件对比合并.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/blogs/开发工具/如何使用git拉取远程仓库最新文件与本地仓库的文件对比合并.html.js"), meta: {"date":1749427200000,"category":["开发工具"],"tag":["Git"],"excerpt":"\n<h2>一、前言</h2>\n<p>在团队协作或本地代码落后于远程仓库时，我们需要将远程仓库的变更同步到本地，并与当前代码进行对比和合并，避免丢失本地修改。本文将通过命令行方式，说明从查看远程仓库到合并的完整流程。</p>\n<h2>二、查看远程仓库信息</h2>\n<p>使用以下命令查看远程仓库的别名（默认一般为 <code>origin</code>）及对应 URL：</p>\n<div class=\"language-bash line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code class=\"language-bash\"><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">git</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> remote</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> -v</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div>","readingTime":{"minutes":2.12,"words":635},"title":"使用 Git 拉取远程仓库并与本地文件对比合并","type":"article"} }],
  ["/blogs/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.html", { loader: () => import(/* webpackChunkName: "blogs_开发工具_正则表达式.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/blogs/开发工具/正则表达式.html.js"), meta: {"date":1748995200000,"category":["开发工具"],"tag":[""],"excerpt":"<hr>\n<blockquote>\n<p>正则表达式（Regular Expression, 简称 Regex）是用于字符串匹配和处理的强大工具，广泛应用于文本搜索、数据清洗、表单验证、爬虫开发等场景。</p>\n</blockquote>\n<h2>一、基础语法速览</h2>\n<table>\n<thead>\n<tr>\n<th>符号</th>\n<th>含义</th>\n<th>示例</th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>.</code></td>\n<td>匹配除换行外的任意字符</td>\n<td><code>a.b</code> → 匹配 <code>acb</code>、<code>a1b</code></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code>^</code></td>\n<td>匹配字符串开始</td>\n<td><code>^abc</code> 匹配 <code>abc123</code></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code>$</code></td>\n<td>匹配字符串结尾</td>\n<td><code>abc$</code> 匹配 <code>123abc</code></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code>*</code></td>\n<td>匹配前一个字符 <strong>0次或多次</strong></td>\n<td><code>a*</code> 匹配 <code>\"\"</code>、<code>a</code>、<code>aaa</code></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code>+</code></td>\n<td>匹配前一个字符 <strong>1次或多次</strong></td>\n<td><code>a+</code> 匹配 <code>a</code>、<code>aa</code></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code>?</code></td>\n<td>匹配前一个字符 <strong>0次或1次</strong></td>\n<td><code>a?</code> 匹配 <code>\"\"</code>、<code>a</code></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code>{n}</code></td>\n<td>恰好重复 n 次</td>\n<td><code>a{3}</code> 匹配 <code>aaa</code></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code>{n,}</code></td>\n<td>至少重复 n 次</td>\n<td><code>a{2,}</code> 匹配 <code>aa</code>、<code>aaa...</code></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code>{n,m}</code></td>\n<td>重复 n 到 m 次</td>\n<td><code>a{2,4}</code> 匹配 <code>aa</code>、<code>aaa</code>、<code>aaaa</code></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code>[]</code></td>\n<td>字符集合，匹配其中任意一个字符</td>\n<td><code>[abc]</code> 匹配 <code>a</code>、<code>b</code>、<code>c</code></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code>[^]</code></td>\n<td>非字符集合，匹配不在其中的字符</td>\n<td><code>[^abc]</code> 匹配非 a/b/c 的字符</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>`</td>\n<td>`</td>\n<td>或运算，匹配左右任意一个表达式</td>\n<td>`abc</td>\n<td>123<code>匹配</code>abc<code>或</code>123`</td>\n</tr>\n<tr>\n<td><code>()</code></td>\n<td>分组，提取或整体应用量词</td>\n<td><code>(abc)+</code> 匹配 <code>abcabc</code></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>","readingTime":{"minutes":1.85,"words":554},"title":"正则表达式学习笔记与常用技巧","type":"article"} }],
  ["/blogs/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/%E7%A0%B4%E8%A7%A3%E5%AE%89%E5%8D%93%E5%BA%94%E7%94%A8.html", { loader: () => import(/* webpackChunkName: "blogs_开发工具_破解安卓应用.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/blogs/开发工具/破解安卓应用.html.js"), meta: {"date":1748908800000,"category":["开发工具"],"tag":["Android"],"excerpt":"<blockquote>\n<p>⚠️ <strong>免责声明：本教程仅供学习 Android 安全和逆向工程知识，请勿用于商业破解或任何违法行为。若用于非法目的，后果自负！</strong></p>\n</blockquote>\n<h2>🧰 工具准备</h2>\n<table>\n<thead>\n<tr>\n<th>工具</th>\n<th>说明</th>\n<th>下载地址</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>🔹 Java JDK（8+）</td>\n<td>用于运行 apktool 和签名 APK</td>\n<td><a href=\"https://www.oracle.com/java/technologies/javase-downloads.html\" target=\"_blank\" rel=\"noopener noreferrer\">Oracle JDK</a> 或 <a href=\"https://jdk.java.net/\" target=\"_blank\" rel=\"noopener noreferrer\">OpenJDK</a></td>\n</tr>\n<tr>\n<td>🔹 Apktool</td>\n<td>用于反编译 / 回编译 APK</td>\n<td><a href=\"https://ibotpeaches.github.io/Apktool/\" target=\"_blank\" rel=\"noopener noreferrer\">Apktool 官网</a></td>\n</tr>\n<tr>\n<td>🔹 Frida-dexdump</td>\n<td>用于动态脱壳</td>\n<td><a href=\"https://github.com/hluwa/frida-dexdump\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub - frida-dexdump</a></td>\n</tr>\n<tr>\n<td>🔹 Jadx GUI</td>\n<td>将 APK 转换为 Java 源码</td>\n<td><a href=\"https://github.com/skylot/jadx\" target=\"_blank\" rel=\"noopener noreferrer\">Jadx GitHub</a></td>\n</tr>\n<tr>\n<td>🔹 ADB 工具</td>\n<td>安装 APK 到 Android 手机</td>\n<td><a href=\"https://developer.android.com/studio/releases/platform-tools\" target=\"_blank\" rel=\"noopener noreferrer\">Platform Tools</a></td>\n</tr>\n</tbody>\n</table>","readingTime":{"minutes":3.22,"words":965},"title":"破解 Android 应用会员逻辑","type":"article"} }],
  ["/blogs/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/%E8%B0%83%E8%AF%95%E5%A5%87%E6%99%AF.html", { loader: () => import(/* webpackChunkName: "blogs_开发工具_调试奇景.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/blogs/开发工具/调试奇景.html.js"), meta: {"date":1759017600000,"category":["开发工具"],"excerpt":"<p>在 IDEA debug Spring Cloud Gateway 中，我遇到过一个让我盯着屏幕发呆的调试场景：</p>\n<p>调试器里明明显示 <code>exchange.getResponse()</code> 是 <code>null</code>，但紧接着调用 <code>exchange.getResponse().getStatusCode()</code> 却能返回有效的状态码（比如 <code>200 OK</code>），甚至能基于这个状态码正常创建 <code>ClientResponse</code>。这看起来像个悖论——<code>null</code> 对象怎么可能调用方法并返回有效值？</p>","readingTime":{"minutes":4.53,"words":1358},"title":"调试奇景：为什么 exchange 的 response 显示为 null，却能拿到 statusCode？","type":"article"} }],
  ["/blogs/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/%E9%9F%A9%E5%B8%88%E5%A4%96%E5%8D%96%E6%9F%9C%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E4%B8%9A%E5%8A%A1%E8%B0%83%E7%A0%94%E6%8A%A5%E5%91%8A.html", { loader: () => import(/* webpackChunkName: "blogs_开发工具_韩师外卖柜管理系统业务调研报告.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/blogs/开发工具/韩师外卖柜管理系统业务调研报告.html.js"), meta: {"excerpt":"\n<h2>一、选题题目</h2>\n<p>韩山师范学院外卖柜管理系统</p>\n<h2>二、详细业务描述</h2>\n<h3>（一）课题背景</h3>\n<p>随着韩山师范学院（以下简称“韩师”）师生生活节奏不断加快，外卖点餐需求呈持续增长态势，校园外卖配送与取餐环节的矛盾日益突出。传统外卖管理模式以“外卖堆放在楼门口、电话通知取餐”为主，已无法适配当前校园外卖服务的需求。同时，社会信息化浪潮推动校园服务向智能化方向升级，国内多所高校已通过引入带基本保温功能的智能外卖柜，有效解决了外卖存放、取餐效率等问题，为韩师建设外卖柜管理系统提供了可借鉴的经验。在此背景下，构建韩师外卖柜管理系统，成为优化校园外卖服务、完善智慧校园生活服务体系的关键举措。</p>","readingTime":{"minutes":11.07,"words":3320},"title":"韩师外卖柜管理系统业务调研报告","type":"article"} }],
  ["/blogs/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1/", { loader: () => import(/* webpackChunkName: "blogs_软件设计_index.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/blogs/软件设计/index.html.js"), meta: {"readingTime":{"minutes":0.07,"words":21},"title":"软件设计","order":8,"type":"article"} }],
  ["/blogs/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1/%E4%BC%81%E4%B8%9A%E7%BA%A7%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B%E6%96%87%E6%A1%A3.html", { loader: () => import(/* webpackChunkName: "blogs_软件设计_企业级项目开发完整流程文档.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/blogs/软件设计/企业级项目开发完整流程文档.html.js"), meta: {"date":1760918400000,"category":["软件设计"],"excerpt":"<h2>一、项目立项阶段（Initiation）</h2>\n<h3>1.1 项目背景与目标</h3>\n<ul>\n<li><strong>背景说明</strong>：描述项目产生的业务背景和需求来源（如业务增长、流程优化、数字化转型等）。</li>\n<li><strong>项目目标</strong>：明确项目要实现的核心目标（KPI：Key Performance Indicators，关键绩效指标 / OKR：Objectives and Key Results，目标与关键成果）。</li>\n<li><strong>项目范围</strong>：定义项目的业务边界、系统功能范围和非功能需求（如性能、安全、可用性等）。</li>\n</ul>","readingTime":{"minutes":4.6,"words":1380},"title":"📘 企业级项目开发完整流程文档","type":"article"} }],
  ["/blogs/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1/%E6%97%B6%E5%BA%8F%E5%9B%BE.html", { loader: () => import(/* webpackChunkName: "blogs_软件设计_时序图.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/blogs/软件设计/时序图.html.js"), meta: {"date":1757894400000,"category":["软件设计"],"tag":["软件设计"],"excerpt":"\n<h2>1. 什么是时序图？</h2>\n<p>时序图（Sequence Diagram）是 <strong>UML（统一建模语言）</strong> 中的一种交互图，用来描述系统中对象之间的消息传递顺序。它强调 <strong>时间顺序</strong>，展示了对象在特定场景下的交互过程。</p>\n<h2>2. 时序图的作用</h2>\n<ul>\n<li><strong>需求分析阶段</strong>：明确业务流程，帮助开发和测试理解需求。</li>\n<li><strong>系统设计阶段</strong>：设计模块间的交互逻辑。</li>\n<li><strong>开发阶段</strong>：作为开发人员编写接口和调用关系的参考。</li>\n<li><strong>测试阶段</strong>：根据时序图设计测试用例，验证业务流程。</li>\n</ul>","readingTime":{"minutes":1.44,"words":432},"title":"时序图","type":"article"} }],
  ["/series/knowledge/", { loader: () => import(/* webpackChunkName: "series_knowledge_index.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/knowledge/index.html.js"), meta: {"excerpt":"\n<p>这里收录了我在技术学习、工具使用和职业发展中的系统总结与实战经验，内容覆盖后端开发、前端技术、系统原理等多个方向。<br>\n你可以通过左侧导航快速访问各个知识分类，或点击下方链接跳转到详细模块。</p>\n<h2>🧠 知识体系概览</h2>\n<h3>🐧 Linux 与操作系统</h3>\n<ul>\n<li>Linux 常用命令与实战技巧</li>\n<li>操作系统原理（进程线程、内存管理、IO模型等）</li>\n</ul>\n<h3>☕ Java 核心</h3>\n<ul>\n<li>Java 基础语法与进阶特性</li>\n<li>集合源码分析与应用场景</li>\n<li><a href=\"/blog/java/multithreading.html\" target=\"_blank\">多线程与并发编程（线程池、锁机制、JMM等)</a></li>\n<li>JVM 内部机制（GC、类加载、内存模型）</li>\n<li>Spring 全家桶（Spring、SpringMVC、SpringBoot）</li>\n<li>微服务架构（SpringCloud、Nacos、Gateway、Feign）</li>\n<li>项目实战与高并发处理（缓存、消息队列、分布式事务）</li>\n</ul>","readingTime":{"minutes":1.06,"words":318},"title":"面试宝典","icon":"/assets/icon/书本.png","type":"article"} }],
  ["/series/myprojects/", { loader: () => import(/* webpackChunkName: "series_myprojects_index.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/myprojects/index.html.js"), meta: {"excerpt":"<p>这里是我在学习过程中独立完成的重点项目，涵盖前后端开发、系统集成。每个项目均配有源码地址与详细说明。</p>\n<h2>🌐 智能停车管理系统</h2>\n<blockquote>\n<p>基于 SpringBoot + Vue3 的校园智能停车解决方案，支持实时车位监控、导航指引、通知提醒、性能测试等核心功能。</p>\n</blockquote>\n<ul>\n<li>核心技术：SpringBoot、Vue3、Redis、Kafka、OpenCV、Selenium、Docker</li>\n<li>关键模块：用户认证、车位识别、预约导航、消息推送、高并发处理</li>\n<li>项目特色：实现图像识别 + 消息队列 + 缓存一致性协同</li>\n<li>🔗 <a href=\"https://github.com/Moonlight168/gupt-management-back-end\" target=\"_blank\" rel=\"noopener noreferrer\">查看源码</a></li>\n</ul>","readingTime":{"minutes":1.51,"words":453},"title":"我的项目总览","icon":"/assets/icon/myprojects.png","type":"article"} }],
  ["/series/knowledge/%E5%88%86%E5%B8%83%E5%BC%8F/", { loader: () => import(/* webpackChunkName: "series_knowledge_分布式_index.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/knowledge/分布式/index.html.js"), meta: {"readingTime":{"minutes":0.07,"words":20},"title":"分布式","order":5,"type":"article"} }],
  ["/series/knowledge/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%85%A8%E5%B1%80%E5%94%AF%E4%B8%80ID.html", { loader: () => import(/* webpackChunkName: "series_knowledge_分布式_全局唯一ID.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/knowledge/分布式/全局唯一ID.html.js"), meta: {"excerpt":"<h3>为什么在分布式系统中需要全局唯一 ID？</h3>\n<p><strong>回答：</strong><br>\n在分库分表、高并发场景下，如果只依赖单机自增 ID，容易产生重复冲突，难以保证数据唯一性和可追踪性。因此需要一种分布式 ID 生成方案，保证在不同机器、不同库表中生成的 ID <strong>全局唯一、有序、性能高</strong>。</p>\n<h3>分布式 ID 生成的常见方案有哪些？</h3>\n<p><strong>回答：</strong></p>\n<ol>\n<li>\n<p><strong>数据库号段（Segment）模式</strong></p>\n<ul>\n<li>每次从数据库取一段号段（如 1000 个），缓存在内存中本地生成。</li>\n<li>优点：实现简单，ID 有序。</li>\n<li>缺点：依赖数据库，存在单点。</li>\n</ul>\n</li>\n<li>\n<p><strong>UUID</strong></p>\n<ul>\n<li>直接生成随机字符串。</li>\n<li>优点：本地生成，无中心化依赖。</li>\n<li>缺点：冗长、无序、查询性能差。</li>\n</ul>\n</li>\n<li>\n<p><strong>Snowflake（雪花算法）</strong></p>\n<ul>\n<li>基于时间戳 + 数据中心 ID + 机器 ID + 自增序列。</li>\n<li>优点：高性能、趋势递增、分布式场景常用。</li>\n<li>缺点：时钟回拨问题、机器 ID 配置复杂。</li>\n</ul>\n</li>\n<li>\n<p><strong>Redis / Zookeeper 分布式自增</strong></p>\n<ul>\n<li>利用分布式缓存/协调器生成 ID。</li>\n<li>优点：一致性强。</li>\n<li>缺点：性能瓶颈、可用性依赖。</li>\n</ul>\n</li>\n<li>\n<p><strong>百度 UidGenerator、美团 Leaf 等中间件</strong></p>\n<ul>\n<li>开源成熟方案，支持号段模式和 Snowflake。</li>\n<li>优点：工业级稳定、性能高。</li>\n</ul>\n</li>\n</ol>","readingTime":{"minutes":3.23,"words":969},"title":"全局唯一ID","type":"article"} }],
  ["/series/knowledge/Java/", { loader: () => import(/* webpackChunkName: "series_knowledge_Java_index.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/knowledge/Java/index.html.js"), meta: {"readingTime":{"minutes":0.04,"words":12},"title":"Java","order":2,"type":"article"} }],
  ["/series/knowledge/Java/tomcat.html", { loader: () => import(/* webpackChunkName: "series_knowledge_Java_tomcat.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/knowledge/Java/tomcat.html.js"), meta: {"date":1748390400000,"excerpt":"<h2>Tomcat 是什么？</h2>\n<p><strong>回答：</strong><br>\nTomcat 是一个由 Apache 提供的开源 Servlet 容器，支持 JSP 和 Servlet 规范，用于运行 Java Web 应用，是轻量级的 Web 服务器。</p>\n<h2>Tomcat 的主要组件有哪些？</h2>\n<p><strong>回答：</strong></p>\n<h4>1. <strong>Catalina（Servlet 容器核心）</strong></h4>\n<ul>\n<li>实现了 Servlet 规范，负责接收请求、加载 Servlet、调用对应的 <code>service()</code> 方法处理请求。</li>\n<li>是 Tomcat 的核心组件，负责整个请求生命周期的管理。</li>\n</ul>","readingTime":{"minutes":3.56,"words":1069},"title":"Tomcat","icon":"/assets/icon/tomcat.png","type":"article"} }],
  ["/series/knowledge/Java/%E5%A4%9A%E7%BA%BF%E7%A8%8B.html", { loader: () => import(/* webpackChunkName: "series_knowledge_Java_多线程.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/knowledge/Java/多线程.html.js"), meta: {"date":1747440000000,"excerpt":"<h2>⭐Java 中的多线程实现方式有哪些？</h2>\n<ol>\n<li>\n<p><strong>继承 <code>Thread</code> 类</strong></p>\n<ul>\n<li>创建子类继承 <code>Thread</code>，重写 <code>run()</code> 方法。</li>\n<li>调用 <code>start()</code> 启动线程。</li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code class=\"language-java\"><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> MyThread</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> extends</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Thread</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> run</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">        System</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">out</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">println</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"Thread running\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Main</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> static</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> main</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">String</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[] </span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">args</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">        MyThread</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> t</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> MyThread</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">        t</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">start</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();  </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 启动线程</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n<li>\n<p><strong>实现 <code>Runnable</code> 接口</strong></p>\n<ul>\n<li>实现 <code>Runnable</code> 接口，重写 <code>run()</code> 方法。</li>\n<li>传入 <code>Thread</code> 构造函数，调用 <code>start()</code> 启动。</li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code class=\"language-java\"><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> MyRunnable</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> implements</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Runnable</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> run</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">        System</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">out</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">println</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"Runnable running\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Main</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> static</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> main</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">String</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[] </span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">args</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">        MyRunnable</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> r</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> MyRunnable</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">        Thread</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> t</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> Thread</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(r);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">        t</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">start</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();  </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 启动线程</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n<li>\n<p><strong>使用 <code>Callable</code> 和 <code>Future</code></strong></p>\n<ul>\n<li>实现 <code>Callable</code> 接口，支持返回值和异常处理。</li>\n<li>通过 <code>ExecutorService.submit()</code> 提交任务，使用 <code>Future.get()</code> 获取结果。</li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code class=\"language-java\"><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">import</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> java.util.concurrent.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">*</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> MyCallable</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> implements</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Callable</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">String</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    public</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> String</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> call</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"Callable running\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Main</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> static</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> main</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">String</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[] </span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">args</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> throws</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Exception</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">        ExecutorService</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> executor</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> Executors</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">newFixedThreadPool</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">        // 提交Callable任务并获取Future对象，用于获取线程执行结果</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">        Future</span><span style=\"--shiki-light:#E45649;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">String</span><span style=\"--shiki-light:#E45649;--shiki-dark:#ABB2BF\">&gt; </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">future</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> executor</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">submit</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> MyCallable</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">());</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">        // 通过future.get()阻塞等待线程执行完成，并获取返回值</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">        System</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">out</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">println</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">future</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">get</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">());  </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 输出 Callable 执行结果           executor.shutdown();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n<li>\n<p><strong>使用线程池 (<code>ExecutorService</code>)</strong></p>\n<ul>\n<li>管理和调度线程，减少线程创建开销。</li>\n<li>常用线程池：<code>FixedThreadPool</code>，<code>CachedThreadPool</code>。</li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code class=\"language-java\"><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">import</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> java.util.concurrent.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">*</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Main</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> static</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> main</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">String</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[] </span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">args</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">        ExecutorService</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> executor</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> Executors</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">newFixedThreadPool</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">        executor</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">submit</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(() </span><span style=\"--shiki-light:#C18401;--shiki-dark:#C678DD\">-&gt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> System</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">out</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">println</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"Thread pool running\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">));</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">        executor</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">shutdown</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n<li>\n<p><strong>使用 <code>ForkJoinPool</code></strong></p>\n<ul>\n<li>适合分治任务，通过 <code>ForkJoinTask</code> 执行并行计算。</li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code class=\"language-java\"><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">import</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> java.util.concurrent.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">*</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> MyTask</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> extends</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> RecursiveTask</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Integer</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    private</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> final</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> n</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    public</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> MyTask</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">int</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> n</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">        this</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">n</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> n;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    @</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\">Override</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    protected</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Integer</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> compute</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (n </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">            return</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        } </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">else</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">            MyTask</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> task1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> MyTask</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(n </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">            task1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">fork</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">            return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> n </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">*</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> task1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">join</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Main</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> static</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> main</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">String</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[] </span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">args</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">        ForkJoinPool</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> pool</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> ForkJoinPool</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">        MyTask</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> task</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> MyTask</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">5</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">        System</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">out</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">println</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">pool</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">invoke</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(task));  </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 输出 120</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n</ol>","readingTime":{"minutes":15.67,"words":4701},"title":"多线程","icon":"/assets/icon/分布式.png","type":"article"} }],
  ["/series/knowledge/Java/%E9%9B%86%E5%90%88.html", { loader: () => import(/* webpackChunkName: "series_knowledge_Java_集合.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/knowledge/Java/集合.html.js"), meta: {"date":1747440000000,"excerpt":"<h2>Java中有哪些集合？</h2>\n<p><strong>回答：</strong><br>\n</p>\n<h2>List, Set, Queue, Map 有什么区别？</h2>\n<p><strong>回答：</strong></p>\n<ul>\n<li><strong>List</strong>：有序、可重复，如 <code>ArrayList</code>、<code>LinkedList</code></li>\n<li><strong>Set</strong>：无序、不可重复，如 <code>HashSet</code>、<code>TreeSet</code></li>\n<li><strong>Queue</strong>：队列结构，先进先出，如 <code>LinkedList</code>、<code>PriorityQueue</code></li>\n<li><strong>Map</strong>：键值对存储，键唯一，如 <code>HashMap</code>、<code>TreeMap</code></li>\n</ul>","readingTime":{"minutes":5.25,"words":1574},"title":"集合","icon":"/assets/icon/集合.png","type":"article"} }],
  ["/series/knowledge/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/front_end.html", { loader: () => import(/* webpackChunkName: "series_knowledge_前端开发_front_end.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/knowledge/前端开发/front_end.html.js"), meta: {"excerpt":"<h2>如何提升前端性能？</h2>\n<p><strong>回答：</strong><br>\n可以从以下几个方面优化前端性能：</p>\n<ul>\n<li>减少 HTTP 请求：合并 CSS/JS 文件，使用雪碧图、图片压缩。</li>\n<li>启用资源压缩与缓存：开启 Gzip，设置合理的浏览器缓存策略。</li>\n<li>异步加载资源：对非关键资源使用懒加载（Lazy Load）和异步加载方式。</li>\n</ul>\n<h2>JS 和 TS 的区别？</h2>\n<p><strong>回答：</strong><br>\nJavaScript 是一种动态类型语言，写起来比较灵活，但是也容易出错，比如变量类型写错了编译阶段是发现不了的。<br>\n而 TypeScript 是 JavaScript 的超集，它加了静态类型和类型检查机制，能在写代码的时候就发现一些潜在的错误。<br>\n简单来说，TS 更加安全、规范，适合大型项目开发，而且它写出来的代码，最终也会编译成 JS 去执行。</p>","readingTime":{"minutes":1.31,"words":394},"title":"前端相关","icon":"/assets/icon/前端.png","type":"article"} }],
  ["/series/knowledge/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/", { loader: () => import(/* webpackChunkName: "series_knowledge_前端开发_index.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/knowledge/前端开发/index.html.js"), meta: {"readingTime":{"minutes":0.07,"words":21},"title":"前端开发","order":9,"type":"article"} }],
  ["/series/knowledge/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/elasticsearch.html", { loader: () => import(/* webpackChunkName: "series_knowledge_开发工具_elasticsearch.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/knowledge/开发工具/elasticsearch.html.js"), meta: {"date":1757548800000,"excerpt":"<h2>说一下你对 Elasticsearch 的理解</h2>\n<p><strong>回答：</strong></p>\n<p>Elasticsearch 就是一个基于 Lucene 的分布式搜索和分析引擎。它的核心能力是做 <strong>全文检索</strong>，也就是说能在海量文本里快速找到你想要的内容。</p>\n<p>它的几个特点：</p>\n<ul>\n<li><strong>分布式</strong>，数据会自动分片、副本，既能水平扩展，也能保证高可用。</li>\n<li><strong>近实时</strong>，数据写进去之后几乎立刻就能查到，适合日志、监控这种实时性要求高的场景。</li>\n<li><strong>搜索和分析能力强</strong>，不仅能做关键词搜索，还能做聚合统计、过滤、排序等分析。</li>\n<li><strong>接口友好</strong>，对外暴露 RESTful API，用 HTTP/JSON 就能操作，很容易和各种语言集成。</li>\n</ul>","readingTime":{"minutes":1.88,"words":564},"title":"Elasticsearch","icon":"/assets/icon/elasticsearch.png","type":"article"} }],
  ["/series/knowledge/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git.html", { loader: () => import(/* webpackChunkName: "series_knowledge_开发工具_git.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/knowledge/开发工具/git.html.js"), meta: {"date":1749427200000,"excerpt":"<h3>✅ Git 是什么？</h3>\n<p><strong>答：</strong><br>\nGit 是一个分布式版本控制系统，用于高效地管理源代码的变更历史，支持多人协作开发。每个开发者的本地仓库都是完整的代码库副本，支持离线操作。</p>\n<p><strong>核心功能包括：</strong></p>\n<ul>\n<li>快速切换分支（branch）</li>\n<li>支持版本回退</li>\n<li>离线提交</li>\n<li>分布式协作（远程仓库）</li>\n</ul>\n<h2>Git 中 fetch、pull、merge 的区别？</h2>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>是否拉取远程代码</th>\n<th>是否自动合并</th>\n<th>用途描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>git fetch</code></td>\n<td>✅ 拉取（但不改当前分支）</td>\n<td>❌ 否</td>\n<td>只同步远程分支，供后续查看或手动合并</td>\n</tr>\n<tr>\n<td><code>git pull</code></td>\n<td>✅ 拉取</td>\n<td>✅ 自动合并</td>\n<td>相当于 <code>fetch</code> + <code>merge</code>，适合快速同步远程分支</td>\n</tr>\n<tr>\n<td><code>git merge</code></td>\n<td>❌ 否（不拉远程）</td>\n<td>✅ 合并</td>\n<td>将指定分支（本地或远程）合并到当前分支</td>\n</tr>\n</tbody>\n</table>","readingTime":{"minutes":1.25,"words":374},"title":"Git","icon":"/assets/icon/git.png","type":"article"} }],
  ["/series/knowledge/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/linux.html", { loader: () => import(/* webpackChunkName: "series_knowledge_开发工具_linux.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/knowledge/开发工具/linux.html.js"), meta: {"date":1747872000000,"excerpt":"<h2><strong>如何查看Java进程的内存使用情况？</strong></h2>\n<p><strong>回答</strong>：</p>\n<ul>\n<li><strong>基础命令</strong>：<div class=\"language-bash line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code class=\"language-bash\"><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">ps</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> -ef</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> | </span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">grep</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> java</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  # 查找Java进程ID</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">top</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> -Hp</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> &lt;</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">PI</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">D&gt;       </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 查看Java进程及线程详情</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">free</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> -h</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">             # 查看系统内存总体使用情况</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n<li><strong>进阶工具</strong>：<div class=\"language-bash line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code class=\"language-bash\"><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">jstat</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> -gc</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> &lt;</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">PI</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">D&gt;     </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 查看JVM堆内存使用情况</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">jmap</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> -heap</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> &lt;</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">PI</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">D&gt;    </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 查看堆内存详细信息</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n</ul>","readingTime":{"minutes":1.96,"words":589},"title":"Linux","icon":"/assets/icon/linux.png","type":"article"} }],
  ["/series/knowledge/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/", { loader: () => import(/* webpackChunkName: "series_knowledge_开发工具_index.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/knowledge/开发工具/index.html.js"), meta: {"readingTime":{"minutes":0.07,"words":21},"title":"开发工具","order":7,"type":"article"} }],
  ["/series/knowledge/%E6%88%91%E7%9A%84%E9%A1%B9%E7%9B%AE/", { loader: () => import(/* webpackChunkName: "series_knowledge_我的项目_index.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/knowledge/我的项目/index.html.js"), meta: {"readingTime":{"minutes":0.06,"words":18},"title":"我的项目","order":10,"type":"article"} }],
  ["/series/knowledge/%E6%88%91%E7%9A%84%E9%A1%B9%E7%9B%AE/%E6%B7%98%E7%A5%A8%E7%A5%A8.html", { loader: () => import(/* webpackChunkName: "series_knowledge_我的项目_淘票票.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/knowledge/我的项目/淘票票.html.js"), meta: {"excerpt":"<h3>说一说你在这个项目中是如何进行分库分表的，为什么要这样做？</h3>\n<p><strong>回答：</strong><br>\n在这个项目中，我使用 <strong>ShardingSphere</strong> 来实现分库分表。用户表、手机号表、邮箱表等核心数据表都做了分库分表处理，例如：</p>\n<ul>\n<li>\n<p><strong>用户表 <code>t_user</code></strong></p>\n<ul>\n<li>分库键：<code>id</code>，分表键：<code>id</code></li>\n<li>分片算法：MOD 取模</li>\n<li>实际表：<code>ds_0.t_user_0</code>、<code>ds_1.t_user_1</code></li>\n<li>根据用户 ID 自动路由到对应数据库和表</li>\n</ul>\n</li>\n<li>\n<p><strong>手机号表 <code>t_user_mobile</code> / 邮箱表 <code>t_user_email</code></strong></p>\n<ul>\n<li>分库键 / 分表键：<code>mobile</code> / <code>email</code></li>\n<li>分片算法：HASH_MOD</li>\n<li>自动计算落到具体的数据库和表，保证唯一性和高并发查询性能</li>\n</ul>\n</li>\n</ul>","readingTime":{"minutes":1.17,"words":352},"title":"淘票票","icon":"/assets/icon/淘票票icon.png","type":"article"} }],
  ["/series/knowledge/%E6%88%91%E7%9A%84%E9%A1%B9%E7%9B%AE/%E9%82%AE%E9%99%A2%E9%80%9A.html", { loader: () => import(/* webpackChunkName: "series_knowledge_我的项目_邮院通.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/knowledge/我的项目/邮院通.html.js"), meta: {"excerpt":"<h3>请描述一下你在项目中如何实现用户鉴权？</h3>\n<p><strong>回答：</strong> 在项目中，我使用了 Spring Security 实现了用户鉴权模块，<br>\n通过配置 UsernamePasswordAuthenticationFilter 和 JwtAuthenticationFilter 来进行用户身份验证。<br>\n用户在登录时，通过用户名和密码进行验证，生成 JWT 令牌，返回给客户端，客户端通过 HTTP Header 携带该令牌进行后续的 API 请求，服务器通过 JWT 解析并验证身份。</p>\n<h3>如何保证Redis缓存与数据库的数据一致性？</h3>","readingTime":{"minutes":1.23,"words":369},"title":"邮院通","icon":"/assets/icon/校园.png","type":"article"} }],
  ["/series/knowledge/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql.html", { loader: () => import(/* webpackChunkName: "series_knowledge_数据库_mysql.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/knowledge/数据库/mysql.html.js"), meta: {"date":1747785600000,"excerpt":"<h2>MySQL 的事务四大特性（ACID）是什么？</h2>\n<p><strong>回答：</strong></p>\n<ul>\n<li>原子性（Atomicity）：事务要么全成功要么全失败。</li>\n<li>一致性（Consistency）：执行前后数据保持一致。</li>\n<li>隔离性（Isolation）：事务间互不干扰。</li>\n<li>持久性（Durability）：事务提交后数据永久保存。</li>\n</ul>\n<h2>索引有哪些类型？什么时候使用？</h2>\n<p><strong>回答：</strong></p>\n<ul>\n<li>主键索引、唯一索引、普通索引、联合索引。</li>\n<li>适用于频繁作为 WHERE、JOIN、ORDER BY 条件的字段；不要给频繁变动的字段建索引。</li>\n</ul>","readingTime":{"minutes":6.99,"words":2096},"title":"MySQL","icon":"/assets/icon/mysql.png","type":"article"} }],
  ["/series/knowledge/%E6%95%B0%E6%8D%AE%E5%BA%93/", { loader: () => import(/* webpackChunkName: "series_knowledge_数据库_index.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/knowledge/数据库/index.html.js"), meta: {"readingTime":{"minutes":0.05,"words":16},"title":"数据库","order":3,"type":"article"} }],
  ["/series/knowledge/%E6%95%B0%E6%8D%AE%E5%BA%93/redis.html", { loader: () => import(/* webpackChunkName: "series_knowledge_数据库_redis.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/knowledge/数据库/redis.html.js"), meta: {"date":1747785600000,"excerpt":"<h2>Redis 缓存穿透、缓存雪崩和缓存击穿分别是什么，如何解决？</h2>\n<p><strong>回答：</strong></p>\n<ul>\n<li><strong>缓存穿透</strong>：指查询一个一定不存在的数据，由于缓存没有命中，就会去查询数据库，而数据库也没有该数据，每次请求都会打到数据库，可能导致数据库压力过大甚至崩溃。解决方法可以使用布隆过滤器，在查询前先通过布隆过滤器判断数据是否存在，不存在就直接返回，不会查询数据库；也可以对查询结果为空的情况也进行缓存，设置较短的过期时间。</li>\n<li><strong>缓存雪崩</strong>：指在某一时刻，大量的缓存同时过期，导致大量请求直接打到数据库，造成数据库压力过大。可以通过设置不同的过期时间，避免大量缓存同时过期；或者使用互斥锁，在缓存失效时，只允许一个线程去查询数据库并更新缓存，其他线程等待。</li>\n<li><strong>缓存击穿</strong>：指一个热点 key，在缓存过期的瞬间，大量的请求同时到来，这些请求都会去查询数据库，造成数据库压力增大。可以使用互斥锁，保证在缓存过期时，只有一个请求去查询数据库并更新缓存；也可以将热点数据设置为永不过期，或者使用二级缓存，第一层缓存失效时，从第二层缓存获取数据。</li>\n</ul>","readingTime":{"minutes":2.57,"words":770},"title":"Redis","icon":"/assets/icon/redis.png","type":"article"} }],
  ["/series/knowledge/%E6%A1%86%E6%9E%B6/mybatis.html", { loader: () => import(/* webpackChunkName: "series_knowledge_框架_mybatis.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/knowledge/框架/mybatis.html.js"), meta: {"excerpt":"<h2>Hibernate 和 MyBatis 有什么区别？</h2>\n<p><strong>回答：</strong></p>\n<ul>\n<li>\n<p><strong>SQL编写：</strong></p>\n<ul>\n<li>Hibernate：自动生成SQL，无需手写SQL，适合快速开发。</li>\n<li>MyBatis：需要手写SQL，灵活性高，适合复杂查询和性能优化。</li>\n</ul>\n</li>\n<li>\n<p><strong>映射方式：</strong></p>\n<ul>\n<li>Hibernate：全自动ORM映射。</li>\n<li>MyBatis：半自动映射，需要手动配置映射关系。</li>\n</ul>\n</li>\n<li>\n<p><strong>缓存机制：</strong></p>\n<ul>\n<li>Hibernate：内置强大的一级、二级缓存机制。</li>\n<li>MyBatis：提供一级缓存，二级缓存需手动配置。</li>\n</ul>\n</li>\n<li>\n<p><strong>事务管理：</strong></p>\n<ul>\n<li>都支持JDBC和Spring事务管理。</li>\n</ul>\n</li>\n<li>\n<p><strong>适用场景：</strong></p>\n<ul>\n<li>Hibernate：适合开发需求变化小、数据结构稳定的项目。</li>\n<li>MyBatis：适合对SQL控制要求高、业务逻辑复杂的项目。</li>\n</ul>\n</li>\n</ul>","readingTime":{"minutes":2.22,"words":666},"title":"Mybatis","icon":"/assets/icon/mybatis.png","order":4,"type":"article"} }],
  ["/series/knowledge/%E6%A1%86%E6%9E%B6/", { loader: () => import(/* webpackChunkName: "series_knowledge_框架_index.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/knowledge/框架/index.html.js"), meta: {"readingTime":{"minutes":0.08,"words":23},"title":"常用框架","order":6,"type":"article"} }],
  ["/series/knowledge/%E6%A1%86%E6%9E%B6/spring.html", { loader: () => import(/* webpackChunkName: "series_knowledge_框架_spring.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/knowledge/框架/spring.html.js"), meta: {"excerpt":"<h2>Spring、SpringBoot 的常用注解？</h2>\n<p><strong>回答：</strong></p>\n<h4>一、核心组件注解</h4>\n<ul>\n<li><code>@Component</code>：通用组件，注入 Spring 容器</li>\n<li><code>@Service</code>：业务层组件</li>\n<li><code>@Repository</code>：持久层组件，支持异常转换</li>\n<li><code>@Controller</code>：控制器组件</li>\n<li><code>@RestController</code>：<code>@Controller + @ResponseBody</code>，返回 JSON</li>\n<li><code>@Configuration</code>：配置类</li>\n<li><code>@Bean</code>：方法定义 Bean，常配合 <code>@Configuration</code> 使用</li>\n<li><code>@ComponentScan</code>：指定扫描路径</li>\n<li><code>@Import</code>：导入配置类或组件</li>\n</ul>","readingTime":{"minutes":10.76,"words":3228},"title":"Spring","icon":"/assets/icon/spring.png","order":1,"type":"article"} }],
  ["/series/knowledge/%E6%A1%86%E6%9E%B6/springcloud.html", { loader: () => import(/* webpackChunkName: "series_knowledge_框架_springcloud.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/knowledge/框架/springcloud.html.js"), meta: {"excerpt":"<h2>什么是微服务？有哪些优缺点？</h2>\n<p><strong>回答：</strong><br>\n微服务是将单体应用拆分成多个独立服务，各服务可独立部署、扩展。</p>\n<ul>\n<li>优点：开发独立、部署灵活、可按需扩展。</li>\n<li>缺点：系统复杂、测试困难、运维成本高、接口通信开销大。</li>\n</ul>\n<h2>每个微服务之间如何通信？</h2>\n<p><strong>回答：</strong></p>\n<ol>\n<li>\n<p><strong>同步通信</strong>：使用 HTTP 或 RPC</p>\n<ul>\n<li>常用方式：OpenFeign、RestTemplate、Dubbo、gRPC</li>\n<li>特点：实时响应，适合强一致性场景</li>\n</ul>\n</li>\n<li>\n<p><strong>异步通信</strong>：通过消息队列</p>\n<ul>\n<li>常用组件：Kafka、RabbitMQ、RocketMQ</li>\n<li>特点：解耦、削峰填谷，适合异步处理场景</li>\n</ul>\n</li>\n</ol>","readingTime":{"minutes":3.65,"words":1095},"title":"SpringCloud","icon":"/assets/icon/cloud.png","order":3,"type":"article"} }],
  ["/series/knowledge/%E6%A1%86%E6%9E%B6/springmvc.html", { loader: () => import(/* webpackChunkName: "series_knowledge_框架_springmvc.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/knowledge/框架/springmvc.html.js"), meta: {"excerpt":"<h2>Spring MVC是什么？</h2>\n<p>Spring MVC 是 Spring 框架内基于 Java 实现 Web MVC 模式的轻量级 Web 框架。它解耦了模型、视图、控制器，让开发者能清晰、便捷地构建 Web 应用。像开发电商网站，可分离商品展示与订单处理等功能，提升代码维护与复用性。</p>\n<h2>Spring MVC的核心组件有哪些，各自的作用是什么？</h2>\n<ul>\n<li><strong>DispatcherServlet</strong>：<br>\n它是Spring MVC的核心控制器，负责接收所有HTTP请求，并将请求分发给相应的处理器进行处理。在<code>web.xml</code>文件中进行配置，示例如下：</li>\n</ul>","readingTime":{"minutes":4.73,"words":1418},"title":"SpringMVC","icon":"/assets/icon/web.png","order":2,"type":"article"} }],
  ["/series/knowledge/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/kafka.html", { loader: () => import(/* webpackChunkName: "series_knowledge_消息队列_kafka.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/knowledge/消息队列/kafka.html.js"), meta: {"date":1747785600000,"excerpt":"<h2>Kafka 是什么？</h2>\n<p><strong>回答：</strong><br>\nKafka 是一个分布式流平台，主要用于高吞吐量的消息传递、日志收集、事件流处理等应用场景。它本质上是一个发布-订阅模式的消息队列，但具有更高的吞吐量和分布式架构。</p>\n<h4>Kafka 的特点：</h4>\n<ul>\n<li><strong>高吞吐量</strong>：Kafka 能够处理非常高的消息吞吐量，适合大规模数据流的实时处理。</li>\n<li><strong>分布式架构</strong>：Kafka 支持多节点集群，可以横向扩展，具备高可用性。</li>\n<li><strong>持久化</strong>：Kafka 消息默认会持久化到磁盘，且支持日志的多副本备份，确保数据不会丢失。</li>\n<li><strong>消息顺序性</strong>：Kafka 保证每个分区内消息的顺序性。</li>\n<li><strong>灵活的消息消费模式</strong>：支持消费者组，消费者可以独立消费消息，也可以作为消费者组共同消费一个主题的数据。</li>\n<li><strong>高可扩展性</strong>：Kafka 能够在集群中扩展更多的分区来增加负载能力，并且消息的读取可以通过并行消费提高吞吐量。</li>\n</ul>","readingTime":{"minutes":6.73,"words":2018},"title":"Kafka","icon":"/assets/icon/kafka.png","order":2,"type":"article"} }],
  ["/series/knowledge/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/rabbitmq.html", { loader: () => import(/* webpackChunkName: "series_knowledge_消息队列_rabbitmq.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/knowledge/消息队列/rabbitmq.html.js"), meta: {"date":1747785600000,"excerpt":"<h2>RabbitMQ 中有哪些常见的交换器（Exchange）类型，它们有什么区别？</h2>\n<p><strong>回答:</strong> 常见的交换器类型有 Direct、Fanout、Topic 和 Headers。</p>\n<ul>\n<li><strong>Direct</strong> ：消息会被发送到 Binding Key 和 Routing Key 完全匹配的队列。适用于需要精确匹配的场景，比如根据日志级别将日志消息发送到不同队列。</li>\n<li><strong>Fanout</strong>：消息会被发送到所有绑定到该交换器的队列，忽略 Binding Key。常用于广播消息的场景，比如群发通知。</li>\n<li><strong>Topic</strong>：消息会根据 Routing Key 和 Binding Key 的模式匹配规则发送到队列。Binding Key 可以使用通配符，比如 *.log 表示匹配所有以 .log 结尾的 Routing Key，适用于需要按规则分发消息的场景。</li>\n<li><strong>Headers</strong>：不依赖于 Routing Key 与 Binding Key 的匹配规则，而是根据发送的消息内容中的 headers 属性进行匹配。在实际应用中较少使用。</li>\n</ul>","readingTime":{"minutes":2.48,"words":744},"title":"RabbitMQ","icon":"/assets/icon/rabbitmq.png","order":1,"type":"article"} }],
  ["/series/knowledge/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/", { loader: () => import(/* webpackChunkName: "series_knowledge_消息队列_index.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/knowledge/消息队列/index.html.js"), meta: {"readingTime":{"minutes":0.08,"words":23},"title":"消息队列","order":4,"type":"article"} }],
  ["/series/knowledge/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/english.html", { loader: () => import(/* webpackChunkName: "series_knowledge_基础知识_english.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/knowledge/基础知识/english.html.js"), meta: {"date":1748995200000,"excerpt":"<h2>一、打招呼与寒暄</h2>\n<ul>\n<li>\n<p><strong>How are you doing?</strong><br>\n你最近怎么样？</p>\n</li>\n<li>\n<p><strong>Long time no see!</strong><br>\n好久不见！</p>\n</li>\n<li>\n<p><strong>Have a nice day!</strong><br>\n祝你今天愉快！</p>\n</li>\n</ul>\n<h2>二、表达感谢与回应</h2>\n<ul>\n<li>\n<p><strong>I really appreciate it.</strong><br>\n我真的很感激。</p>\n</li>\n<li>\n<p><strong>No problem. / You’re welcome.</strong><br>\n不用谢。</p>\n</li>\n<li>\n<p><strong>It’s my pleasure.</strong><br>\n这是我的荣幸。</p>\n</li>\n<li>\n<p><strong>Don’t mention it.</strong><br>\n不用放在心上。</p>\n</li>\n</ul>","readingTime":{"minutes":3.79,"words":1137},"title":"日常英语","icon":"/assets/icon/english.png","order":5,"type":"article"} }],
  ["/series/knowledge/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/", { loader: () => import(/* webpackChunkName: "series_knowledge_基础知识_index.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/knowledge/基础知识/index.html.js"), meta: {"readingTime":{"minutes":0.07,"words":21},"title":"基础知识","order":8,"type":"article"} }],
  ["/series/knowledge/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86.html", { loader: () => import(/* webpackChunkName: "series_knowledge_基础知识_操作系统原理.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/knowledge/基础知识/操作系统原理.html.js"), meta: {"readingTime":{"minutes":0.05,"words":14},"title":"操作系统原理","icon":"/assets/icon/操作系统.png","type":"article"} }],
  ["/series/knowledge/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E7%AE%97%E6%B3%95%E4%B8%8E%E8%AE%BE%E8%AE%A1.html", { loader: () => import(/* webpackChunkName: "series_knowledge_基础知识_算法与设计.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/knowledge/基础知识/算法与设计.html.js"), meta: {"date":1748822400000,"excerpt":"<h3><a class=\"header-anchor\" href=\"#_1-三数之和\"><span></span></a><a href=\"https://leetcode.cn/problems/3sum/description/?envType=study-plan-v2&amp;envId=top-100-liked\" target=\"_blank\" rel=\"noopener noreferrer\">1.三数之和</a></h3>\n<figure><figcaption>题目说明</figcaption></figure>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code class=\"language-java\"><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Solution</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    public</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> List</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">List</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Integer</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;&gt;</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> threeSum</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#C678DD\">int</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[] </span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">nums</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">        List</span><span style=\"--shiki-light:#E45649;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">List</span><span style=\"--shiki-light:#E45649;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Integer</span><span style=\"--shiki-light:#E45649;--shiki-dark:#ABB2BF\">&gt;&gt; </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">result</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> ArrayList</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;&gt;();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">        // 对数组进行排序，排序后便于使用双指针法，利用数组的有序性提高查找效率</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">        Arrays</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">sort</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(nums);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">        // 遍历数组，i 作为第一个数的索引，最多遍历到倒数第三个元素，因为后面需要两个元素与它组成三元组</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        for</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> i</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; i </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> nums</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">length</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> -</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; i++) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">            // 跳过重复的 i 值，避免结果集中出现重复的三元组</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">            if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (i </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> &amp;&amp;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> nums[i] </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> nums[i </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">                continue</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">            }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">            // 左指针初始化为 i 的下一个位置</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">            int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> left</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> i </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">+</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">            // 右指针初始化为数组的最后一个位置</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">            int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> right</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> nums</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">length</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> -</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">            // 当左指针小于右指针时，继续循环查找满足条件的三元组</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">            while</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (left </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> right) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">                // 计算当前三个数的和</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">                int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> sum</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> nums[i] </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">+</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> nums[left] </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">+</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> nums[right];</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">                if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (sum </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">                    // 如果和为 0，说明找到了一个满足条件的三元组，将其加入结果集</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">                    result</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">add</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">Arrays</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">asList</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(nums[i], nums[left], nums[right]));</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">                    // 跳过重复的 left 值，避免结果集中出现重复的三元组</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">                    while</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (left </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> right </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&amp;&amp;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> nums[left] </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> nums[left </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">+</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">                        left++;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">                    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">                    // 跳过重复的 right 值，避免结果集中出现重复的三元组</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">                    while</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (left </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> right </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&amp;&amp;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> nums[right] </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> nums[right </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">                        right--;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">                    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">                    // 移动左指针和右指针，继续寻找下一个满足条件的三元组</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">                    left++;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">                    right--;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">                } </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">else</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (sum </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">                    // 如果和小于 0，说明需要增大和，将左指针右移</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">                    left++;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">                } </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">else</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">                    // 如果和大于 0，说明需要减小和，将右指针左移</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">                    right--;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">                }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">            }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> result;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","readingTime":{"minutes":2.69,"words":808},"title":"算法与设计","icon":"/assets/icon/算法与设计.png","type":"article"} }],
  ["/series/knowledge/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C.html", { loader: () => import(/* webpackChunkName: "series_knowledge_基础知识_计算机网络.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/knowledge/基础知识/计算机网络.html.js"), meta: {"excerpt":"<h2>什么是TCP的三次握手和四次挥手？</h2>\n<p><strong>回答：</strong></p>\n<h3><strong>一、TCP三次握手（建立连接）</strong></h3>\n<p>TCP（传输控制协议）是面向连接的协议，三次握手用于确保通信双方的发送和接收能力正常，流程如下：</p>\n<h4><strong>1. 握手过程图示</strong></h4>\n<div class=\"language-plaintext line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"plaintext\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code class=\"language-plaintext\"><span class=\"line\"><span>客户端                          服务器  </span></span>\n<span class=\"line\"><span>  │                                │  </span></span>\n<span class=\"line\"><span>  ├───────── SYN=1, seq=x ─────────►│  （客户端发送同步请求，初始化序列号x）  </span></span>\n<span class=\"line\"><span>  │                                │  </span></span>\n<span class=\"line\"><span>  │  ◄───────── SYN=1, ACK=x+1, seq=y ──────┤  （服务器确认请求，发送同步+确认，初始化序列号y）  </span></span>\n<span class=\"line\"><span>  │                                │  </span></span>\n<span class=\"line\"><span>  ├───────── ACK=y+1 ────────────►│  （客户端确认服务器的确认，连接建立完成）  </span></span>\n<span class=\"line\"><span>  │                                │</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","readingTime":{"minutes":8.26,"words":2478},"title":"计算机网络","icon":"/assets/icon/网络.png","type":"article"} }],
  ["/series/knowledge/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1.html", { loader: () => import(/* webpackChunkName: "series_knowledge_基础知识_软件设计.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/knowledge/基础知识/软件设计.html.js"), meta: {"readingTime":{"minutes":0.03,"words":10},"title":"软件设计","icon":"/assets/icon/设计.png","type":"article"} }],
  ["/series/myprojects/FlowMind/", { loader: () => import(/* webpackChunkName: "series_myprojects_FlowMind_index.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/myprojects/FlowMind/index.html.js"), meta: {"excerpt":"\n<p><strong>A Cloud-Native Intelligent Workflow Orchestration Platform Based on LLM and Microservices</strong><br>\n<em>(基于云原生与大模型的智能审批工作流编排平台)</em></p>\n<hr>\n<h2>🚀 项目简介</h2>\n<p><strong>FlowMind</strong> 是一个结合 <strong>Camunda 8 (Zeebe)</strong>、<strong>LLM 智能 Agent</strong> 与 <strong>云原生微服务架构</strong> 的智能审批工作流平台。<br>\n系统面向跨部门资源与预算申请场景，实现从“申请→审批→分配→通知”的全流程自动化与智能化。</p>","readingTime":{"minutes":2.77,"words":830},"title":"项目介绍","order":1,"type":"article"} }],
  ["/series/myprojects/%E6%B7%98%E7%A5%A8%E7%A5%A8/", { loader: () => import(/* webpackChunkName: "series_myprojects_淘票票_index.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/myprojects/淘票票/index.html.js"), meta: {"excerpt":"\n<p><a href=\"https://opensource.org/licenses/Apache-2.0\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://img.shields.io/badge/License-Apache 2.0-blue.svg\" alt=\"License\" loading=\"lazy\"></a>  <img src=\"https://img.shields.io/badge/Java-17-orange\" alt=\"Java\" loading=\"lazy\">  <img src=\"https://img.shields.io/badge/Spring Boot-3.2.x-brightgreen\" alt=\"Spring Boot\" loading=\"lazy\">  <img src=\"https://img.shields.io/badge/build-Maven-blue\" alt=\"Build\" loading=\"lazy\"></p>","readingTime":{"minutes":5.61,"words":1684},"title":"项目介绍","order":2,"type":"article"} }],
  ["/series/myprojects/%E6%B7%98%E7%A5%A8%E7%A5%A8/%E9%A1%B9%E7%9B%AE%E5%9F%BA%E7%A1%80.html", { loader: () => import(/* webpackChunkName: "series_myprojects_淘票票_项目基础.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/myprojects/淘票票/项目基础.html.js"), meta: {"excerpt":"\n<h2>1. 数据库表关系</h2>\n<p>淘票票项目采用分库分表的设计，主要数据库包括：</p>\n<h3>1.1 用户相关数据库 (taopiaopiao_user_0, taopiaopiao_user_1)</h3>\n<ul>\n<li><code>t_user_0</code>, <code>t_user_1</code>: 用户基本信息表</li>\n<li><code>t_ticket_user_0</code>, <code>t_ticket_user_1</code>: 购票人信息表</li>\n<li><code>t_user_email_0</code>, <code>t_user_email_1</code>: 用户邮箱信息表</li>\n<li><code>t_user_mobile_0</code>, <code>t_user_mobile_1</code>: 用户手机号信息表</li>\n</ul>","readingTime":{"minutes":2.79,"words":838},"title":"基础文档","order":2,"type":"article"} }],
  ["/series/myprojects/%E9%82%AE%E9%99%A2%E9%80%9A/", { loader: () => import(/* webpackChunkName: "series_myprojects_邮院通_index.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/myprojects/邮院通/index.html.js"), meta: {"excerpt":"<p><a href=\"https://opensource.org/licenses/Apache-2.0\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://img.shields.io/badge/License-Apache 2.0-blue.svg\" alt=\"License\" loading=\"lazy\"></a>  <img src=\"https://img.shields.io/badge/Java-17-orange\" alt=\"Java\" loading=\"lazy\">  <img src=\"https://img.shields.io/badge/Spring Boot-3.2.x-brightgreen\" alt=\"Spring Boot\" loading=\"lazy\">  <img src=\"https://img.shields.io/badge/build-Maven-blue\" alt=\"Build\" loading=\"lazy\"></p>","readingTime":{"minutes":8.15,"words":2445},"title":"项目介绍","order":5,"type":"article"} }],
  ["/series/knowledge/Java/Java%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98/IO.html", { loader: () => import(/* webpackChunkName: "series_knowledge_Java_Java基础面试题_IO.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/knowledge/Java/Java基础面试题/IO.html.js"), meta: {"excerpt":"\n<h2>Java怎么实现网络IO高并发编程？</h2>\n<p>Java实现网络IO高并发的核心是使用<strong>Java NIO</strong>（Non-Blocking IO），它是一种同步非阻塞的IO模型，基于I/O多路复用技术，可通过单个线程处理多个客户端连接，解决传统BIO（Blocking IO）多线程开销大的问题。</p>\n<h3>1. 传统BIO的缺陷（不适合高并发）</h3>\n<p>BIO采用\"一个连接一个线程\"的模型：客户端发起连接后，服务端需创建一个线程专门处理该连接的IO操作（如<code>socket.read()</code>）。若连接未发送数据，线程会阻塞在<code>read()</code>方法上，导致线程资源浪费。当客户端数量达到数千甚至数万时，线程数量暴增，会耗尽CPU和内存资源，导致系统性能急剧下降。</p>","readingTime":{"minutes":9.3,"words":2790},"title":"I/O","order":14,"type":"article"} }],
  ["/series/knowledge/Java/Java%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98/Java%20%E6%96%B0%E7%89%B9%E6%80%A7.html", { loader: () => import(/* webpackChunkName: "series_knowledge_Java_Java基础面试题_Java 新特性.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/knowledge/Java/Java基础面试题/Java 新特性.html.js"), meta: {"excerpt":"\n<h2>Java 8 你知道有什么新特性？</h2>\n<p>下面是 Java 8 主要新特性的整理表格，包含关键改进和示例说明：</p>\n<table>\n<thead>\n<tr>\n<th>特性名称</th>\n<th>描述</th>\n<th>示例或说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Lambda 表达式</td>\n<td>简化匿名内部类，支持函数式编程</td>\n<td><code>(a, b) -&gt; a + b</code> 代替匿名类实现接口</td>\n</tr>\n<tr>\n<td>函数式接口</td>\n<td>仅含一个抽象方法的接口，可用<code>@FunctionalInterface</code>注解标记</td>\n<td><code>Runnable</code>, <code>Comparator</code>, 或自定义接口 <code>@FunctionalInterface interface MyFunc { void run(); }</code></td>\n</tr>\n<tr>\n<td>Stream API</td>\n<td>提供链式操作处理集合数据，支持并行处理</td>\n<td><code>list.stream().filter(x -&gt; x &gt; 0).collect(Collectors.toList())</code></td>\n</tr>\n<tr>\n<td>Optional 类</td>\n<td>封装可能为<code>null</code>的对象，减少空指针异常</td>\n<td><code>Optional.ofNullable(value).orElse(\"default\")</code></td>\n</tr>\n<tr>\n<td>方法引用</td>\n<td>简化 Lambda 表达式，直接引用现有方法</td>\n<td><code>System.out::println</code> 等价于 <code>x -&gt; System.out.println(x)</code></td>\n</tr>\n<tr>\n<td>接口的默认方法与静态方法</td>\n<td>接口可定义默认实现和静态方法，增强扩展性</td>\n<td><code>interface A { default void print() { System.out.println(\"默认方法\"); } }</code></td>\n</tr>\n<tr>\n<td>并行数组排序</td>\n<td>使用多线程加速数组排序</td>\n<td><code>Arrays.parallelSort(array)</code></td>\n</tr>\n<tr>\n<td>重复注解</td>\n<td>允许同一位置多次使用相同注解</td>\n<td><code>@Repeatable</code> 注解配合容器注解使用</td>\n</tr>\n<tr>\n<td>类型注解</td>\n<td>注解可应用于更多位置（如泛型、异常等）</td>\n<td><code>List&lt;@NonNull String&gt; list</code></td>\n</tr>\n<tr>\n<td>CompletableFuture</td>\n<td>增强异步编程能力，支持链式调用和组合操作</td>\n<td><code>CompletableFuture.supplyAsync(() -&gt; \"result\").thenAccept(System.out::println)</code></td>\n</tr>\n</tbody>\n</table>","readingTime":{"minutes":9.13,"words":2740},"title":"Java 新特性","order":11,"type":"article"} }],
  ["/series/knowledge/Java/Java%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98/object.html", { loader: () => import(/* webpackChunkName: "series_knowledge_Java_Java基础面试题_object.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/knowledge/Java/Java基础面试题/object.html.js"), meta: {"excerpt":"\n<h2>== 与 equals 有什么区别？</h2>\n<table>\n<thead>\n<tr>\n<th>对比维度</th>\n<th>==</th>\n<th>equals()</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>作用对象</td>\n<td>基本数据类型：比较值是否相等；<br>引用数据类型：比较内存地址（对象是否为同一实例）</td>\n<td>仅用于引用数据类型，默认比较内存地址（继承自Object），重写后可比较内容（如String）</td>\n</tr>\n<tr>\n<td>本质</td>\n<td>数值比较（基本类型比较值，引用类型比较地址值）</td>\n<td>逻辑比较，可自定义比较规则（通过重写）</td>\n</tr>\n<tr>\n<td>可重写性</td>\n<td>不可重写（运算符，非方法）</td>\n<td>可重写（Object类的方法，子类可自定义实现）</td>\n</tr>\n</tbody>\n</table>","readingTime":{"minutes":2.35,"words":705},"title":"object","order":9,"type":"article"} }],
  ["/series/knowledge/Java/Java%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98/", { loader: () => import(/* webpackChunkName: "series_knowledge_Java_Java基础面试题_index.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/knowledge/Java/Java基础面试题/index.html.js"), meta: {"readingTime":{"minutes":0.07,"words":22},"title":"Java基础面试题","order":1,"type":"article"} }],
  ["/series/knowledge/Java/Java%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98/String%E3%80%81StringBuffer%E3%80%81StringBuilder%E7%9A%84%E5%8C%BA%E5%88%AB%E5%92%8C%E8%81%94%E7%B3%BB.html", { loader: () => import(/* webpackChunkName: "series_knowledge_Java_Java基础面试题_String、StringBuffer、StringBuilder的区别和联系.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/knowledge/Java/Java基础面试题/String、StringBuffer、StringBuilder的区别和联系.html.js"), meta: {"excerpt":"\n<ol>\n<li><strong>可变性</strong>：<code>String</code>是不可变的（Immutable），一旦创建，内容无法修改，每次修改都会生成一个新的对象。<code>StringBuilder</code>和<code>StringBuffer</code>是可变的（Mutable），可以直接对字符串内容进行修改而不会创建新对象。</li>\n<li><strong>线程安全性</strong>：<code>String</code>因为不可变，天然线程安全。<code>StringBuilder</code>不是线程安全的，适用于单线程环境。<code>StringBuffer</code>是线程安全的，其方法通过<code>synchronized</code>关键字实现同步，适用于多线程环境。</li>\n<li><strong>性能</strong>：<code>String</code>性能最低，尤其是在频繁修改字符串时会生成大量临时对象，增加内存开销和垃圾回收压力。<code>StringBuilder</code>性能最高，因为它没有线程安全的开销，适合单线程下的字符串操作。<code>StringBuffer</code>性能略低于<code>StringBuilder</code>，因为它的线程安全机制引入了同步开销。</li>\n<li><strong>使用场景</strong>：如果字符串内容固定或不常变化，优先使用<code>String</code>。如果需要频繁修改字符串且在单线程环境下，使用<code>StringBuilder</code>。如果需要频繁修改字符串且在多线程环境下，使用<code>StringBuffer</code>。</li>\n</ol>","readingTime":{"minutes":1.54,"words":462},"title":"String、StringBuffer、StringBuilder的区别和联系","order":10,"type":"article"} }],
  ["/series/knowledge/Java/Java%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98/%E5%85%B3%E9%94%AE%E5%AD%97.html", { loader: () => import(/* webpackChunkName: "series_knowledge_Java_Java基础面试题_关键字.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/knowledge/Java/Java基础面试题/关键字.html.js"), meta: {"excerpt":"\n<h2>Java 中 final 作用是什么？</h2>\n<p><code>final</code>关键字主要用于修饰<strong>类、方法、变量</strong>，作用分别如下：</p>\n<ol>\n<li><strong>修饰类</strong>：该类不能被继承，是继承体系的最终形态。示例：Java的<code>String</code>类用<code>final</code>修饰，保证其不可变性和安全性，防止子类修改其行为。</li>\n<li><strong>修饰方法</strong>：该方法不能在子类中被重写。示例：<code>java.lang.Object</code>的<code>getClass()</code>方法是<code>final</code>的，其行为由JVM底层实现，不允许子类修改。</li>\n<li><strong>修饰变量</strong>：\n<ul>\n<li>基本数据类型：变量赋值后不能再修改（成为常量）。示例：<code>final int num = 10;</code>，<code>num</code>不能二次赋值。</li>\n<li>引用数据类型：引用变量不能再指向其他对象，但对象内部内容可修改。示例：<code>final StringBuilder sb = new StringBuilder(\"Hello\");</code>，<code>sb</code>不能指向新对象，但可通过<code>sb.append(\"World\")</code>修改字符串内容。</li>\n</ul>\n</li>\n</ol>","readingTime":{"minutes":0.75,"words":224},"title":"关键字","order":16,"type":"article"} }],
  ["/series/knowledge/Java/Java%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98/%E5%85%B6%E4%BB%96.html", { loader: () => import(/* webpackChunkName: "series_knowledge_Java_Java基础面试题_其他.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/knowledge/Java/Java基础面试题/其他.html.js"), meta: {"excerpt":"\n<h2>有一个学生类，想按照分数排序，再按学号排序，应该怎么做？</h2>\n<p>可通过<strong>实现Comparable接口</strong>（自然排序）或<strong>使用Comparator接口</strong>（定制排序）实现，推荐使用<code>Comparable</code>接口，让学生类自身具备排序能力，代码如下：</p>\n<h3>方法1：实现Comparable接口（推荐，自然排序）</h3>\n<p>让<code>Student</code>类实现<code>java.lang.Comparable</code>接口，重写<code>compareTo</code>方法，定义\"先按分数排序，分数相同则按学号排序\"的逻辑：</p>","readingTime":{"minutes":5.79,"words":1738},"title":"其他","order":15,"type":"article"} }],
  ["/series/knowledge/Java/Java%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98/%E5%8F%8D%E5%B0%84.html", { loader: () => import(/* webpackChunkName: "series_knowledge_Java_Java基础面试题_反射.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/knowledge/Java/Java基础面试题/反射.html.js"), meta: {"excerpt":"\n<h2>什么是反射？</h2>\n<p>Java反射机制是<strong>运行时动态获取类信息、操作对象成员</strong>的能力：</p>\n<ul>\n<li>对任意类，能获取其所有属性、方法、构造器等结构信息。</li>\n<li>对任意对象，能调用其任意方法（包括私有方法）、访问/修改其任意字段（包括私有字段）。</li>\n</ul>\n<p>（此处应有\"Java反射获取类信息流程\"的示意图，图片名称：Java反射机制示意图）</p>\n<h3>反射的核心特性</h3>\n<ol>\n<li><strong>运行时类信息访问</strong>：无需编译时知道类名，即可在运行时获取类的包名、父类、接口、成员等信息。</li>\n<li><strong>动态对象创建</strong>：通过<code>Class.newInstance()</code>或<code>Constructor.newInstance()</code>，运行时动态创建对象（无需<code>new</code>关键字）。</li>\n<li><strong>动态方法调用</strong>：通过<code>Method.invoke()</code>，运行时调用对象的方法（包括私有方法）。</li>\n<li><strong>字段访问与修改</strong>：通过<code>Field.get()</code>/<code>Field.set()</code>，运行时访问/修改对象的字段（包括私有字段）。</li>\n</ol>","readingTime":{"minutes":2.02,"words":607},"title":"反射","order":6,"type":"article"} }],
  ["/series/knowledge/Java/Java%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98/%E5%AF%B9%E8%B1%A1.html", { loader: () => import(/* webpackChunkName: "series_knowledge_Java_Java基础面试题_对象.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/knowledge/Java/Java基础面试题/对象.html.js"), meta: {"excerpt":"\n<h2>java创建对象有哪些方式？</h2>\n<p>Java中创建对象的常见方式有5种：</p>\n<ol>\n<li><strong>使用new关键字</strong>：直接调用类的构造方法，最常用。<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code class=\"language-java\"><span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">MyClass</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> obj </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> MyClass</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">()</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div></li>\n<li><strong>使用Class类的newInstance()方法</strong>：通过反射创建对象，需类有默认构造方法（无参构造）。<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code class=\"language-java\"><span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">MyClass</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> obj </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> (MyClass) </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">Class</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">forName</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"com.example.MyClass\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">).</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">newInstance</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div></li>\n<li><strong>使用Constructor类的newInstance()方法</strong>：通过反射创建对象，支持调用有参构造方法，更灵活。<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code class=\"language-java\"><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 获取指定构造器（此处以无参构造为例）</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Constructor</span><span style=\"--shiki-light:#E45649;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">MyClass</span><span style=\"--shiki-light:#E45649;--shiki-dark:#ABB2BF\">&gt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> constructor </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> MyClass</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">class</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">getConstructor</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">MyClass</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> obj </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> constructor</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">newInstance</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n<li><strong>使用clone()方法</strong>：类需实现<code>Cloneable</code>接口并重写<code>clone()</code>方法，创建对象的副本（默认浅拷贝）。<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code class=\"language-java\"><span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">MyClass</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> obj1 </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> MyClass</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">()</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">MyClass</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> obj2 </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> (MyClass) </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">obj1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">clone</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n<li><strong>使用反序列化</strong>：将序列化后的字节流（如文件中的对象）反序列化为对象，类需实现<code>Serializable</code>接口。<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code class=\"language-java\"><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 序列化（写入文件）</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">ObjectOutputStream</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> out </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> ObjectOutputStream</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> FileOutputStream</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"object.ser\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">))</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">out</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">writeObject</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(obj);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">out</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">close</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 反序列化（读取对象）</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">ObjectInputStream</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> in </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> ObjectInputStream</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> FileInputStream</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"object.ser\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">))</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">MyClass</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> obj </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> (MyClass) </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">in</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">readObject</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">in</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">close</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n</ol>","readingTime":{"minutes":3.92,"words":1176},"title":"对象","order":5,"type":"article"} }],
  ["/series/knowledge/Java/Java%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98/%E5%BA%8F%E5%88%97%E5%8C%96.html", { loader: () => import(/* webpackChunkName: "series_knowledge_Java_Java基础面试题_序列化.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/knowledge/Java/Java基础面试题/序列化.html.js"), meta: {"excerpt":"\n<h2>怎么把一个对象从一个JVM转移到另一个JVM?</h2>\n<ol>\n<li>\n<p><strong>序列化与反序列化</strong><br>\n将对象序列化为字节流，通过网络传输或文件存储发送到另一个JVM，再在目标JVM中反序列化字节流恢复对象。Java原生通过<code>ObjectOutputStream</code>（序列化）和<code>ObjectInputStream</code>（反序列化）实现，需确保对象类实现<code>Serializable</code>接口。</p>\n</li>\n<li>\n<p><strong>消息传递机制</strong><br>\n利用消息队列（如RabbitMQ、Kafka）或网络套接字（Socket），自定义协议将对象序列化后发送。例如，通过Socket建立两个JVM间的连接，将序列化后的字节流写入输出流，目标JVM从输入流读取并反序列化。</p>\n</li>\n<li>\n<p><strong>远程方法调用（RPC）</strong><br>\n使用RPC框架（如gRPC、Dubbo），框架内部封装对象序列化、网络传输和反序列化逻辑，开发者可直接调用远程JVM上的对象方法，无需手动处理传输细节。例如，gRPC基于Protocol Buffers序列化对象，实现跨语言、跨JVM的方法调用。</p>\n</li>\n<li>\n<p><strong>共享数据库或缓存</strong><br>\n将对象存储在共享数据库（如MySQL）或分布式缓存（如Redis）中，两个JVM通过读写共享存储实现对象\"转移\"。适用于无需实时传输、仅需共享数据的场景，需将对象转换为数据库字段或缓存支持的格式（如JSON）。</p>\n</li>\n</ol>","readingTime":{"minutes":5.12,"words":1536},"title":"序列化","order":12,"type":"article"} }],
  ["/series/knowledge/Java/Java%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98/%E5%BC%82%E5%B8%B8.html", { loader: () => import(/* webpackChunkName: "series_knowledge_Java_Java基础面试题_异常.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/knowledge/Java/Java基础面试题/异常.html.js"), meta: {"excerpt":"\n<h2>介绍一下Java异常</h2>\n<p>Java异常体系基于<code>Throwable</code>类，其下分为<code>Error</code>（错误）和<code>Exception</code>（异常）两大分支，分别对应不同类型的异常情况。</p>\n<p>（此处应有\"Java异常类层次结构\"的示意图，图片名称：Java异常体系结构图）</p>\n<h3>1. Error（错误）</h3>\n<ul>\n<li>定义：表示<strong>运行时环境的严重错误</strong>，程序无法处理，通常是JVM或系统级问题。</li>\n<li>特点：无需捕获或声明抛出，程序应直接终止，避免尝试恢复。</li>\n<li>示例：<code>OutOfMemoryError</code>（内存溢出）、<code>StackOverflowError</code>（栈溢出）、<code>NoClassDefFoundError</code>（类未找到）。</li>\n</ul>","readingTime":{"minutes":4.38,"words":1314},"title":"异常","order":8,"type":"article"} }],
  ["/series/knowledge/Java/Java%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html", { loader: () => import(/* webpackChunkName: "series_knowledge_Java_Java基础面试题_数据类型.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/knowledge/Java/Java基础面试题/数据类型.html.js"), meta: {"excerpt":"\n<h2>八种基本的数据类型</h2>\n<p>Java数据类型分为<strong>基本数据类型</strong>和<strong>引用数据类型</strong>：</p>\n<ul>\n<li>基本数据类型共8种，分三类：\n<ul>\n<li>数值型：整数类型（byte、short、int、long）、浮点类型（float、double）</li>\n<li>字符型：char</li>\n<li>布尔型：boolean</li>\n</ul>\n</li>\n<li>引用数据类型：类（class）、接口（interface）、数组</li>\n</ul>\n<p>8种基本数据类型的默认值、位数、取值范围如下表所示：</p>","readingTime":{"minutes":8.28,"words":2485},"title":"数据类型","order":2,"type":"article"} }],
  ["/series/knowledge/Java/Java%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98/%E6%A6%82%E5%BF%B5.html", { loader: () => import(/* webpackChunkName: "series_knowledge_Java_Java基础面试题_概念.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/knowledge/Java/Java基础面试题/概念.html.js"), meta: {"excerpt":"\n<h2>说一下Java的特点</h2>\n<p>主要有以下的特点：</p>\n<ul>\n<li><strong>平台无关性</strong>：Java的\"编写一次，运行无处不在\"哲学是其最大的特点之一。Java编译器将源代码编译成字节码（bytecode），该字节码可以在任何安装了Java虚拟机（JVM）的系统上运行。</li>\n<li><strong>面向对象</strong>：Java是一门严格的面向对象编程语言，几乎一切都是对象。面向对象编程（OOP）特性使得代码更易于维护和重用，包括类（class）、对象（object）、继承（inheritance）、多态（polymorphism）、抽象（abstraction）和封装（encapsulation）。</li>\n<li><strong>内存管理</strong>：Java有自己的垃圾回收机制，自动管理内存和回收不再使用的对象。这样，开发者不需要手动管理内存，从而减少内存泄漏和其他内存相关的问题。</li>\n</ul>","readingTime":{"minutes":5.61,"words":1682},"title":"概念","order":1,"type":"article"} }],
  ["/series/knowledge/Java/Java%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98/%E6%B3%9B%E5%9E%8B.html", { loader: () => import(/* webpackChunkName: "series_knowledge_Java_Java基础面试题_泛型.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/knowledge/Java/Java基础面试题/泛型.html.js"), meta: {"excerpt":"\n<h2>什么是泛型？</h2>\n<p>泛型是Java的重要特性，允许类、接口、方法在定义时使用<strong>类型参数</strong>，使用时再指定具体类型。</p>\n<p>其核心目的是<strong>编译时类型检查</strong>，避免运行时类型转换异常，同时提升代码复用性。</p>\n<h3>为什么需要泛型？</h3>\n<ol>\n<li><strong>代码复用</strong>：无需为不同数据类型编写重复代码。例如，未用泛型时，需重载<code>add(int a, int b)</code>、<code>add(float a, float b)</code>等方法；用泛型后，可复用为一个方法：<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code class=\"language-java\"><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">private</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> static</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> &lt;</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">T</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> extends Number</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> double</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> add</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">T</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> T</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> b) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    return</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">doubleValue</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> +</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> b</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">doubleValue</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n<li><strong>类型安全</strong>：编译时约束集合或方法的类型，避免存入错误类型数据。例如，未用泛型时，<code>List</code>可存入任意类型，取出时强制转换易出错；用泛型后，<code>List&lt;String&gt;</code>仅允许存入String，编译时即可拦截错误：<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code class=\"language-java\"><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 未用泛型（风险）</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">List</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> list </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> ArrayList</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">()</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">list</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">add</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"string\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">list</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">add</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">100</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> // 允许存入Integer，取出时转换易出错</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 用泛型（安全）</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">List</span><span style=\"--shiki-light:#E45649;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">String</span><span style=\"--shiki-light:#E45649;--shiki-dark:#ABB2BF\">&gt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> list </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> ArrayList</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">()</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">list</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">add</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"string\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">list</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">add</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">100</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> // 编译报错，不允许存入非String类型</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n</ol>","readingTime":{"minutes":0.96,"words":288},"title":"泛型","order":4,"type":"article"} }],
  ["/series/knowledge/Java/Java%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98/%E6%B3%A8%E8%A7%A3.html", { loader: () => import(/* webpackChunkName: "series_knowledge_Java_Java基础面试题_注解.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/knowledge/Java/Java基础面试题/注解.html.js"), meta: {"excerpt":"\n<h2>能讲一讲Java注解的原理吗？</h2>\n<p>Java注解的本质是<strong>继承了<code>java.lang.annotation.Annotation</code>的特殊接口</strong>，其具体实现由Java运行时动态生成的代理类完成。</p>\n<h3>核心原理流程</h3>\n<ol>\n<li><strong>注解定义</strong>：用<code>@interface</code>定义注解时，编译器会将其转换为继承<code>Annotation</code>的接口。例如：<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code class=\"language-java\"><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">public</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> @</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">interface</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\"> MyAnnotation</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">    String</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> value</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">()</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 编译后等价于：</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> interface</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> MyAnnotation</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> extends</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Annotation</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">    String</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> value</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n<li><strong>动态代理实现</strong>：运行时通过反射（如<code>clazz.getAnnotation(MyAnnotation.class)</code>）获取注解时，JVM会生成一个动态代理对象（实现该注解接口），代理类的核心是<code>AnnotationInvocationHandler</code>。</li>\n<li><strong>属性值获取</strong>：调用注解的方法（如<code>annotation.value()</code>）时，实际会调用<code>AnnotationInvocationHandler.invoke()</code>方法，该方法从<code>memberValues</code>（一个存储注解属性值的Map）中获取对应值。</li>\n<li><strong>属性值来源</strong>：<code>memberValues</code>的内容来源于Java常量池——注解的属性值在编译时被存入常量池，运行时JVM读取常量池信息，初始化<code>memberValues</code>。</li>\n</ol>","readingTime":{"minutes":2.99,"words":896},"title":"注解","order":7,"type":"article"} }],
  ["/series/knowledge/Java/Java%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B5%85%E6%8B%B7%E8%B4%9D.html", { loader: () => import(/* webpackChunkName: "series_knowledge_Java_Java基础面试题_深拷贝和浅拷贝.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/knowledge/Java/Java基础面试题/深拷贝和浅拷贝.html.js"), meta: {"excerpt":"\n<h2>深拷贝和浅拷贝的区别？</h2>\n<p>（此处应有\"浅拷贝与深拷贝对象引用关系\"的示意图，图片名称：浅拷贝深拷贝对比图）</p>\n<table>\n<thead>\n<tr>\n<th>对比维度</th>\n<th>浅拷贝（Shallow Copy）</th>\n<th>深拷贝（Deep Copy）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>拷贝范围</td>\n<td>仅拷贝对象本身和内部值类型字段</td>\n<td>拷贝对象本身 + 内部所有引用类型字段（递归拷贝）</td>\n</tr>\n<tr>\n<td>引用关系</td>\n<td>原对象与拷贝对象的引用类型字段指向同一对象</td>\n<td>原对象与拷贝对象的引用类型字段指向不同对象（全新副本）</td>\n</tr>\n<tr>\n<td>数据独立性</td>\n<td>引用类型字段修改会相互影响</td>\n<td>完全独立，修改一方不影响另一方</td>\n</tr>\n<tr>\n<td>实现复杂度</td>\n<td>较简单（如<code>Object.clone()</code>默认浅拷贝）</td>\n<td>较复杂（需递归处理引用类型或用序列化）</td>\n</tr>\n</tbody>\n</table>","readingTime":{"minutes":2.54,"words":761},"title":"深拷贝和浅拷贝","order":3,"type":"article"} }],
  ["/series/knowledge/Java/Java%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html", { loader: () => import(/* webpackChunkName: "series_knowledge_Java_Java基础面试题_设计模式.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/knowledge/Java/Java基础面试题/设计模式.html.js"), meta: {"excerpt":"\n<h2>volatile和synchronized如何实现单例模式</h2>\n<p>通过\"双重检查锁定\"（Double-Checked Locking）模式，结合<code>volatile</code>和<code>synchronized</code>，可实现线程安全、高性能的单例模式，代码如下：</p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code class=\"language-java\"><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Singleton</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // 1. volatile修饰实例变量：禁止指令重排序，保证可见性</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    private</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> static</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> volatile</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Singleton</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> instance </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // 2. 私有构造方法：防止外部直接new创建对象</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    private</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> Singleton</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // 3. 静态获取实例方法：双重检查锁定</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> static</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Singleton</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> getInstance</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">        // 第一次检查：未加锁，快速判断实例是否已存在（避免频繁加锁）</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (instance </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">            // 加锁：仅当实例未创建时，才进入同步代码块（保证线程安全）</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">            synchronized</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">Singleton</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">class</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">                // 第二次检查：防止多个线程同时进入同步块后，重复创建实例</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">                if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (instance </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">                    instance </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> Singleton</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// volatile禁止此步骤指令重排序</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">                }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">            }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> instance;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","readingTime":{"minutes":3.95,"words":1185},"title":"设计模式","order":13,"type":"article"} }],
  ["/series/knowledge/Java/Java%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98/%E9%9D%A2%E5%AF%B9%E5%AF%B9%E8%B1%A1.html", { loader: () => import(/* webpackChunkName: "series_knowledge_Java_Java基础面试题_面对对象.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/knowledge/Java/Java基础面试题/面对对象.html.js"), meta: {"excerpt":"\n<h2>怎么理解面向对象？简单说说封装继承多态</h2>\n<p>面向对象是一种编程范式，将现实世界中的事物抽象为<strong>对象</strong>——对象包含属性（数据）和行为（方法）。其设计思想以对象为中心，通过对象间的交互实现程序功能，具备灵活性和可扩展性，能通过封装、继承应对需求变化。</p>\n<p>Java面向对象的三大特性：</p>\n<ol>\n<li><strong>封装</strong>：将对象的属性和行为结合，对外隐藏内部细节，仅通过接口与外界交互。目的是增强安全性、简化编程，使对象更独立。</li>\n<li><strong>继承</strong>：子类自动共享父类数据结构和方法的机制，是代码复用的重要手段，能建立类的层次关系，使结构更清晰。</li>\n<li><strong>多态</strong>：允许不同类的对象对同一消息作出响应（同一接口，不同实例执行不同操作）。分为编译时多态（重载）和运行时多态（重写），能提升程序灵活性和扩展性。</li>\n</ol>","readingTime":{"minutes":11.72,"words":3516},"title":"面向对象","order":17,"type":"article"} }],
  ["/series/myprojects/%E6%B7%98%E7%A5%A8%E7%A5%A8/%E4%B8%9A%E5%8A%A1%E5%8A%9F%E8%83%BD/%E8%AF%A6%E7%BB%86%E4%B8%9A%E5%8A%A1%E8%AE%B2%E8%A7%A3.html", { loader: () => import(/* webpackChunkName: "series_myprojects_淘票票_业务功能_详细业务讲解.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/myprojects/淘票票/业务功能/详细业务讲解.html.js"), meta: {"excerpt":"\n<h2>1. 参数加解密配置</h2>\n<p>淘票票项目采用了完善的参数加密和解密机制，确保数据在传输过程中的安全性。</p>\n<h3>1.1 加密配置</h3>\n<p>系统使用了多种加密算法：</p>\n<ul>\n<li>RSA签名公钥和私钥用于签名验证</li>\n<li>AES密钥用于数据加密</li>\n<li>RSA参数公钥和私钥用于参数加密</li>\n</ul>\n<p>这些密钥信息存储在ChannelDataAddDto类中，包含以下关键字段：</p>\n<ul>\n<li>signPublicKey: RSA签名公钥</li>\n<li>signSecretKey: RSA签名私钥</li>\n<li>aesKey: AES私钥</li>\n<li>dataPublicKey: RSA参数公钥</li>\n<li>dataSecretKey: RSA参数私钥</li>\n<li>tokenSecret: Token秘钥</li>\n</ul>","readingTime":{"minutes":7.54,"words":2263},"title":"淘票票项目详细业务讲解","type":"article"} }],
  ["/series/myprojects/%E6%B7%98%E7%A5%A8%E7%A5%A8/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E6%9E%B6%E6%9E%84%E9%85%8D%E7%BD%AE%E8%AE%B2%E8%A7%A3.html", { loader: () => import(/* webpackChunkName: "series_myprojects_淘票票_架构设计_架构配置讲解.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/myprojects/淘票票/架构设计/架构配置讲解.html.js"), meta: {"excerpt":"\n<h2>1. 业务过滤器的讲解</h2>\n<p>淘票票项目中实现了多个过滤器来处理请求和响应，确保系统的安全性和一致性。</p>\n<h3>1.1 网关层过滤器</h3>\n<h4>RequestValidationFilter（请求验证过滤器）</h4>\n<ul>\n<li>位置：taopiaopiao-server/taopiaopiao-gateway-service</li>\n<li>功能：\n<ul>\n<li>请求参数验证和签名验证</li>\n<li>Token验证和用户身份识别</li>\n<li>请求限流控制</li>\n<li>TraceId生成和传递</li>\n<li>请求体解密和验证</li>\n</ul>\n</li>\n<li>执行顺序：order = -2，优先级较高(Spring Cloud Gateway 中：设置order &gt; 0（post 阶段） 拦截器，设置order &lt; 0（pre 阶段）拦截器）</li>\n</ul>","readingTime":{"minutes":18.15,"words":5445},"title":"淘票票项目架构配置讲解","type":"article"} }],
  ["/series/myprojects/%E6%B7%98%E7%A5%A8%E7%A5%A8/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E6%B7%B1%E6%8C%96%E4%BA%AE%E7%82%B9%E8%AE%B2%E8%A7%A3.html", { loader: () => import(/* webpackChunkName: "series_myprojects_淘票票_架构设计_深挖亮点讲解.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/myprojects/淘票票/架构设计/深挖亮点讲解.html.js"), meta: {"excerpt":"\n<h2>1. 多级缓存一致性保障机制</h2>\n<p>在高并发系统中，缓存是提升性能的关键手段。淘票票项目采用了多级缓存架构，并实现了完善的缓存一致性保障机制。</p>\n<h3>1.1 多级缓存架构设计</h3>\n<p>淘票票项目采用三级缓存架构：</p>\n<ol>\n<li><strong>本地缓存（Caffeine）</strong>：访问速度最快，存储热点数据</li>\n<li><strong>分布式缓存（Redis）</strong>：支持集群部署，数据共享</li>\n<li><strong>持久化存储（MySQL）</strong>：数据的最终来源</li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code class=\"language-java\"><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 本地缓存示例</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> LocalCacheProgramShowTime</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    private</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> final</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Cache</span><span style=\"--shiki-light:#E45649;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">String</span><span style=\"--shiki-light:#E45649;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> ProgramShowTime</span><span style=\"--shiki-light:#E45649;--shiki-dark:#ABB2BF\">&gt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> localCache </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> Caffeine</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">newBuilder</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">            .</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">maximumSize</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1000</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">            .</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">expireAfterWrite</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">10</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">TimeUnit</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">MINUTES</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">            .</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">build</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","readingTime":{"minutes":5.3,"words":1591},"title":"淘票票项目深挖亮点讲解","type":"article"} }],
  ["/series/myprojects/%E6%B7%98%E7%A5%A8%E7%A5%A8/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%9C%A8%E6%B7%98%E7%A5%A8%E7%A5%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8.html", { loader: () => import(/* webpackChunkName: "series_myprojects_淘票票_架构设计_设计模式在淘票票项目中的应用.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/myprojects/淘票票/架构设计/设计模式在淘票票项目中的应用.html.js"), meta: {"excerpt":"\n<p>淘票票项目作为高并发的票务系统，在架构设计中广泛应用了多种设计模式，以提高代码的可维护性、可扩展性和复用性。本文将详细介绍项目中使用的主要设计模式及其具体应用。</p>\n<h2>1. 工厂模式（Factory Pattern）</h2>\n<h3>1.1 模式定义</h3>\n<p>工厂模式是一种创建型设计模式，它提供了一种创建对象的最佳方式。在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，而是引用一个共同的接口来指向新创建的对象。</p>\n<h3>1.2 项目应用</h3>\n<h4>1.2.1 ServiceLockFactory（分布式锁工厂）</h4>\n<p>在分布式锁模块中，[ServiceLockFactory](file://F:\\MyProjects\\taopiaopiao\\taopiaopiao-redisson-framework\\taopiaopiao-redisson-service-framework\\taopiaopiao-service-lock-framework\\src\\main\\java\\com\\taopiaopiao\\servicelock\\factory\\ServiceLockFactory.java#L15-L36)根据锁类型创建不同的锁实现：</p>","readingTime":{"minutes":6.46,"words":1939},"title":"设计模式在淘票票项目中的应用","type":"article"} }],
  ["/series/myprojects/%E6%B7%98%E7%A5%A8%E7%A5%A8/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E8%AF%A6%E7%BB%86%E7%9A%84%E6%9E%B6%E6%9E%84%E7%BB%84%E4%BB%B6%E8%AE%B2%E8%A7%A3.html", { loader: () => import(/* webpackChunkName: "series_myprojects_淘票票_架构设计_详细的架构组件讲解.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/myprojects/淘票票/架构设计/详细的架构组件讲解.html.js"), meta: {"excerpt":"\n<h2>1. 设计灰度环境服务调用</h2>\n<h3>1.1 灰度发布概念</h3>\n<p>灰度发布（又名金丝雀发布）是指在黑与白之间，能够平滑过渡的一种发布方式。在其上可以进行A/B testing，即让一部分用户继续用产品特性A，一部分用户开始用产品特性B，如果用户对B没有什么反对意见，那么逐步扩大范围，把所有用户都迁移到B上面来。</p>\n<h3>1.2 淘票票项目灰度环境设计</h3>\n<p>淘票票项目通过以下方式实现灰度环境服务调用：</p>\n<ol>\n<li>\n<p><strong>灰度标识配置</strong></p>\n<ul>\n<li>通过配置文件设置服务的灰度标识（server.gray）</li>\n<li>灰度标识通过请求头传递（gray_parameter）</li>\n</ul>\n</li>\n<li>\n<p><strong>灰度过滤器</strong></p>\n<ul>\n<li>实现ServerGrayFilter类继承AbstractServerFilter</li>\n<li>通过ContextHandler获取请求上下文中的灰度标识</li>\n<li>根据灰度标识决定调用哪个版本的服务实例</li>\n</ul>\n</li>\n<li>\n<p><strong>负载均衡配置</strong></p>\n<ul>\n<li>使用自定义的GrayLoadBalanceAutoConfiguration配置类</li>\n<li>通过DefaultFilterLoadBalance类实现灰度路由过滤</li>\n<li>结合Nacos服务发现机制，根据灰度标识选择对应的服务实例</li>\n</ul>\n</li>\n<li>\n<p><strong>上下文传递</strong></p>\n<ul>\n<li>通过GatewayContextHolder在网关层存储请求上下文</li>\n<li>通过FeignRequestInterceptor在服务间调用时传递灰度标识</li>\n</ul>\n</li>\n</ol>","readingTime":{"minutes":13.86,"words":4157},"title":"淘票票项目详细的架构组件讲解","type":"article"} }],
  ["/series/myprojects/%E6%B7%98%E7%A5%A8%E7%A5%A8/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5.html", { loader: () => import(/* webpackChunkName: "series_myprojects_淘票票_最佳实践_延迟队列最佳实践.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/myprojects/淘票票/最佳实践/延迟队列最佳实践.html.js"), meta: {"excerpt":"\n<p>在分布式系统中，延迟队列是一种重要的组件，用于处理需要在特定时间后执行的任务。淘票票项目通过实现一套完整的延迟队列机制来解决订单超时未支付自动取消、活动开始前提醒等场景的需求。</p>\n<h2>1. 模块概述</h2>\n<p>延迟队列模块位于 [taopiaopiao-service-delay-queue-framework](file:///F%3A/MyProjects/taopiaopiao/taopiaopiao-redisson-framework/taopiaopiao-service-delay-queue-framework) 目录下，基于Redisson实现，提供了高性能、可扩展的延迟队列功能。</p>","readingTime":{"minutes":7.69,"words":2307},"title":"淘票票项目延迟队列最佳实践","type":"article"} }],
  ["/series/myprojects/%E6%B7%98%E7%A5%A8%E7%A5%A8/%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/%E8%AF%A6%E7%BB%86%E7%9A%84%E6%8A%80%E6%9C%AF%E7%B2%BE%E5%8D%8E%E8%AE%B2%E8%A7%A3.html", { loader: () => import(/* webpackChunkName: "series_myprojects_淘票票_核心技术_详细的技术精华讲解.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/myprojects/淘票票/核心技术/详细的技术精华讲解.html.js"), meta: {"excerpt":"\n<h2>1. Nacos 核心知识点总结</h2>\n<h3>1.1 Nacos简介</h3>\n<p>Nacos是阿里巴巴开源的动态服务发现、配置管理和服务管理平台，是构建以\"服务\"为中心的现代应用架构的关键组件。</p>\n<h3>1.2 淘票票项目中Nacos的应用</h3>\n<p>在淘票票项目中，Nacos主要承担以下职责：</p>\n<ol>\n<li>\n<p><strong>服务注册与发现</strong></p>\n<ul>\n<li>所有微服务启动时自动注册到Nacos</li>\n<li>服务间调用通过服务名进行，Nacos负责服务发现</li>\n<li>支持服务健康检查和自动剔除</li>\n</ul>\n</li>\n<li>\n<p><strong>配置管理</strong></p>\n<ul>\n<li>统一管理各服务的配置信息</li>\n<li>支持配置的动态更新，无需重启服务</li>\n<li>配置变更时自动推送到各服务实例</li>\n</ul>\n</li>\n<li>\n<p><strong>元数据管理</strong></p>\n<ul>\n<li>存储服务的元数据信息</li>\n<li>支持灰度发布中的服务标签管理</li>\n</ul>\n</li>\n</ol>","readingTime":{"minutes":13.13,"words":3940},"title":"淘票票项目详细的技术精华讲解","type":"article"} }],
  ["/series/myprojects/%E6%B7%98%E7%A5%A8%E7%A5%A8/%E4%B8%9A%E5%8A%A1%E5%8A%9F%E8%83%BD/%E5%8A%9F%E8%83%BD%E8%A7%A3%E8%AF%BB/%E5%A4%8D%E5%90%88%E6%A0%A1%E9%AA%8C.html", { loader: () => import(/* webpackChunkName: "series_myprojects_淘票票_业务功能_功能解读_复合校验.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/myprojects/淘票票/业务功能/功能解读/复合校验.html.js"), meta: {"excerpt":"\n<h2>1. 核心概念</h2>\n<p><strong>复合校验（Composite Validation）</strong> 是一种结合了 <strong>组合模式（Composite Pattern）</strong> 和 <strong>责任链模式（Chain of Responsibility Pattern）</strong> 思想的设计方式。<br>\n它通过 <strong>树形结构</strong> 组织多个校验组件，并以 <strong>层次化 + 顺序化</strong> 的方式执行，使得复杂的业务校验逻辑得以高内聚、低耦合地管理和扩展。</p>\n<p>📌 简单来说：</p>","readingTime":{"minutes":6.38,"words":1913},"title":"2.淘票票项目复合校验实现详解","type":"article"} }],
  ["/series/myprojects/%E6%B7%98%E7%A5%A8%E7%A5%A8/%E4%B8%9A%E5%8A%A1%E5%8A%9F%E8%83%BD/%E5%8A%9F%E8%83%BD%E8%A7%A3%E8%AF%BB/%E8%B4%AD%E7%A5%A8%E5%8A%9F%E8%83%BD%E8%A7%A3%E8%AF%BB.html", { loader: () => import(/* webpackChunkName: "series_myprojects_淘票票_业务功能_功能解读_购票功能解读.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/myprojects/淘票票/业务功能/功能解读/购票功能解读.html.js"), meta: {"excerpt":"\n<h2>一、项目概述</h2>\n<h3>1. 核心技术栈</h3>\n<ol>\n<li><strong>Spring Boot + Spring Cloud Alibaba</strong> - 微服务框架</li>\n<li><strong>Nacos</strong> - 服务注册与配置中心</li>\n<li><strong>Sentinel</strong> - 服务熔断与限流</li>\n<li><strong>MySQL + ShardingSphere</strong> - 分库分表数据库方案</li>\n<li><strong>Redis</strong> - 缓存、分布式锁、队列等</li>\n<li><strong>Kafka</strong> - 消息队列</li>\n<li><strong>ElasticSearch</strong> - 搜索引擎</li>\n<li><strong>MyBatis-Plus</strong> - ORM框架</li>\n</ol>","readingTime":{"minutes":13.43,"words":4028},"title":"1.淘票票购票功能详解","type":"article"} }],
  ["/series/myprojects/%E6%B7%98%E7%A5%A8%E7%A5%A8/%E4%B8%9A%E5%8A%A1%E5%8A%9F%E8%83%BD/%E5%8A%9F%E8%83%BD%E8%A7%A3%E8%AF%BB/%E9%AA%8C%E8%AF%81%E7%A0%81%E5%8A%9F%E8%83%BD%E8%A7%A3%E8%AF%BB.html", { loader: () => import(/* webpackChunkName: "series_myprojects_淘票票_业务功能_功能解读_验证码功能解读.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/myprojects/淘票票/业务功能/功能解读/验证码功能解读.html.js"), meta: {"excerpt":"\n<h3>1. 功能概述</h3>\n<p>验证码功能用于防止恶意注册、刷单等自动化攻击，采用滑块拼图验证码形式，结合频率控制机制动态决定是否需要验证。</p>\n<h3>2. 前端实现</h3>\n<h4>2.1 组件结构</h4>\n<div class=\"language-vue line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"vue\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code class=\"language-vue\"><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">&lt;!-- register.vue --&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">template</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  &lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">Verify</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">    mode</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"pop\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">          </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    :</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">captchaType</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">captchaType</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    :</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">imgSize</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">width</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'400px'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">height</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'200px'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">    ref</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"verify\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    @</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">update</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">value</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">handleValueFromChild</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  /&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">template</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","readingTime":{"minutes":3.66,"words":1098},"title":"3.淘票票项目验证码功能完整说明","type":"article"} }],
  ["/series/myprojects/%E6%B7%98%E7%A5%A8%E7%A5%A8/%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/Redisson%E6%A1%86%E6%9E%B6%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0.html", { loader: () => import(/* webpackChunkName: "series_myprojects_淘票票_核心技术_分布式锁_Redisson框架设计与实现.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/myprojects/淘票票/核心技术/分布式锁/Redisson框架设计与实现.html.js"), meta: {"excerpt":"\n<p>在淘票票高并发系统中，Redisson框架扮演着至关重要的角色。该框架基于Redisson客户端封装了分布式锁、防重复执行、布隆过滤器等多个核心组件，为系统提供了高可用、高性能的分布式协调能力。</p>\n<h2>一、模块结构概览</h2>\n<p>淘票票Redisson框架采用模块化设计，主要包括以下几个子模块：</p>\n<div class=\"language- line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code class=\"language-\"><span class=\"line\"><span>taopiaopiao-redisson-framework</span></span>\n<span class=\"line\"><span>├── taopiaopiao-redisson-service-framework</span></span>\n<span class=\"line\"><span>│   ├── taopiaopiao-redisson-common-framework     # 公共配置模块</span></span>\n<span class=\"line\"><span>│   ├── taopiaopiao-service-lock-framework        # 分布式锁模块</span></span>\n<span class=\"line\"><span>│   ├── taopiaopiao-repeat-execute-limit-framework # 防重复执行模块</span></span>\n<span class=\"line\"><span>│   └── taopiaopiao-bloom-filter-framework        # 布隆过滤器模块</span></span>\n<span class=\"line\"><span>└── taopiaopiao-service-delay-queue-framework     # 延迟队列模块</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","readingTime":{"minutes":5.9,"words":1771},"title":"淘票票Redisson框架设计与实现详解","type":"article"} }],
  ["/series/myprojects/%E6%B7%98%E7%A5%A8%E7%A5%A8/%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E7%9A%84%E4%BD%BF%E7%94%A8%E5%92%8C%E5%AE%9E%E7%8E%B0.html", { loader: () => import(/* webpackChunkName: "series_myprojects_淘票票_核心技术_分布式锁_分布式锁的使用和实现.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/myprojects/淘票票/核心技术/分布式锁/分布式锁的使用和实现.html.js"), meta: {"excerpt":"\n<p>在淘票票高并发场景中，日均千万级订单支付和百万级电影票秒杀容易出现\"重复支付\"\"库存超卖\"等问题。分布式锁是解决跨服务并发冲突的核心技术。我们最终采用<strong>Redisson+AOP</strong>方案：Redisson保障分布式锁的可靠性，AOP实现业务与锁逻辑解耦，开发者只需一行注解即可为核心接口添加并发防护。本文将详细解析该方案的设计思路、实现细节与最佳实践。</p>\n<h2>一、为什么淘票票需要分布式锁？</h2>\n<p>分布式系统中，多个服务实例共享同一资源（如订单、库存）时，本地锁（<code>synchronized</code>、<code>ReentrantLock</code>）只能控制单实例内的并发，<a href=\"/blogs/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/%E8%B7%A8%E5%AE%9E%E4%BE%8B.html\" target=\"_blank\">跨实例</a>的并发冲突成为“重灾区”。3类典型问题：</p>","readingTime":{"minutes":24.11,"words":7233},"title":"淘票票分布式锁实战：基于Redisson与AOP的高并发防护体系","type":"article"} }],
  ["/series/myprojects/%E6%B7%98%E7%A5%A8%E7%A5%A8/%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/API%E9%99%90%E5%88%B6/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/API%E9%99%90%E5%88%B6%E5%8A%9F%E8%83%BD%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5.html", { loader: () => import(/* webpackChunkName: "series_myprojects_淘票票_核心技术_API限制_最佳实践_API限制功能深度解析与最佳实践.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/myprojects/淘票票/核心技术/API限制/最佳实践/API限制功能深度解析与最佳实践.html.js"), meta: {"excerpt":"\n<h2>1. 概述</h2>\n<p>淘票票项目通过API限制功能来保护系统免受恶意请求和异常流量的影响，确保系统的稳定性和高可用性。该功能基于Redis和Lua脚本实现，具备高性能、低延迟的特点，能够实时监控和限制API访问频率。</p>\n<h2>2. 整体架构设计</h2>\n<h3>2.1 核心组件</h3>\n<p>API限制功能主要由以下几个核心组件构成：</p>\n<ol>\n<li><strong>ApiRestrictService</strong>：Java服务层，负责业务逻辑处理和规则配置</li>\n<li><strong>ApiRestrictCacheOperate</strong>：Redis Lua脚本执行器</li>\n<li><strong>apiLimit.lua</strong>：核心Lua脚本，实现限流逻辑</li>\n<li><strong>Redis</strong>：存储限流相关数据和状态</li>\n</ol>","readingTime":{"minutes":8.02,"words":2407},"title":"淘票票项目API限制功能深度解析与最佳实践","type":"article"} }],
  ["/series/myprojects/%E6%B7%98%E7%A5%A8%E7%A5%A8/%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5.html", { loader: () => import(/* webpackChunkName: "series_myprojects_淘票票_核心技术_分布式锁_最佳实践_分布式锁最佳实践.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/myprojects/淘票票/核心技术/分布式锁/最佳实践/分布式锁最佳实践.html.js"), meta: {"excerpt":"\n<p>在高并发分布式系统中，为了保证数据一致性，经常需要在多个服务实例间协调对共享资源的访问。淘票票项目通过实现一套完整的分布式锁机制来解决这个问题，本文将详细介绍该机制的设计和实现。</p>\n<h2>1. 模块概述</h2>\n<p>分布式锁模块位于 [taopiaopiao-service-lock-framework](file:///F%3A/MyProjects/taopiaopiao/taopiaopiao-redisson-framework/taopiaopiao-redisson-service-framework/taopiaopiao-service-lock-framework) 目录下，基于Redisson实现，提供了多种类型的分布式锁和灵活的使用方式。</p>","readingTime":{"minutes":7.73,"words":2319},"title":"淘票票项目分布式锁最佳实践","type":"article"} }],
  ["/series/myprojects/%E6%B7%98%E7%A5%A8%E7%A5%A8/%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/%E9%98%B2%E9%87%8D%E5%A4%8D%E6%8F%90%E4%BA%A4%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5.html", { loader: () => import(/* webpackChunkName: "series_myprojects_淘票票_核心技术_分布式锁_最佳实践_防重复提交最佳实践.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/myprojects/淘票票/核心技术/分布式锁/最佳实践/防重复提交最佳实践.html.js"), meta: {"excerpt":"\n<p>在高并发系统中，防止用户重复提交请求是一个常见且重要的问题。淘票票项目中通过实现一个专门的防重复提交模块来解决这个问题，该模块基于Redis和本地锁实现了一套完整的防重复提交机制。</p>\n<h2>1. 模块概述</h2>\n<p>防重复提交模块位于 [taopiaopiao-repeat-execute-limit-framework](file:///F%3A/MyProjects/taopiaopiao/taopiaopiao-redisson-framework/taopiaopiao-redisson-service-framework/taopiaopiao-repeat-execute-limit-framework) 目录下，通过AOP（面向切面编程）和注解的方式实现防重复提交功能。</p>","readingTime":{"minutes":5.84,"words":1751},"title":"淘票票项目防重复提交（幂等性）最佳实践","type":"article"} }],
  ["/404.html", { loader: () => import(/* webpackChunkName: "404.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/404.html.js"), meta: {"title":""} }],
  ["/blogs/", { loader: () => import(/* webpackChunkName: "blogs_index.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/blogs/index.html.js"), meta: {"title":"Blogs"} }],
  ["/series/", { loader: () => import(/* webpackChunkName: "series_index.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/index.html.js"), meta: {"title":"Series"} }],
  ["/series/myprojects/%E6%B7%98%E7%A5%A8%E7%A5%A8/%E4%B8%9A%E5%8A%A1%E5%8A%9F%E8%83%BD/", { loader: () => import(/* webpackChunkName: "series_myprojects_淘票票_业务功能_index.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/myprojects/淘票票/业务功能/index.html.js"), meta: {"title":"业务功能"} }],
  ["/series/myprojects/%E6%B7%98%E7%A5%A8%E7%A5%A8/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/", { loader: () => import(/* webpackChunkName: "series_myprojects_淘票票_架构设计_index.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/myprojects/淘票票/架构设计/index.html.js"), meta: {"title":"架构设计"} }],
  ["/series/myprojects/%E6%B7%98%E7%A5%A8%E7%A5%A8/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/", { loader: () => import(/* webpackChunkName: "series_myprojects_淘票票_最佳实践_index.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/myprojects/淘票票/最佳实践/index.html.js"), meta: {"title":"最佳实践"} }],
  ["/series/myprojects/%E6%B7%98%E7%A5%A8%E7%A5%A8/%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/", { loader: () => import(/* webpackChunkName: "series_myprojects_淘票票_核心技术_index.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/myprojects/淘票票/核心技术/index.html.js"), meta: {"title":"核心技术"} }],
  ["/series/myprojects/%E6%B7%98%E7%A5%A8%E7%A5%A8/%E4%B8%9A%E5%8A%A1%E5%8A%9F%E8%83%BD/%E5%8A%9F%E8%83%BD%E8%A7%A3%E8%AF%BB/", { loader: () => import(/* webpackChunkName: "series_myprojects_淘票票_业务功能_功能解读_index.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/myprojects/淘票票/业务功能/功能解读/index.html.js"), meta: {"title":"功能解读"} }],
  ["/series/myprojects/%E6%B7%98%E7%A5%A8%E7%A5%A8/%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/", { loader: () => import(/* webpackChunkName: "series_myprojects_淘票票_核心技术_分布式锁_index.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/myprojects/淘票票/核心技术/分布式锁/index.html.js"), meta: {"title":"分布式锁"} }],
  ["/series/myprojects/%E6%B7%98%E7%A5%A8%E7%A5%A8/%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/API%E9%99%90%E5%88%B6/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/", { loader: () => import(/* webpackChunkName: "series_myprojects_淘票票_核心技术_API限制_最佳实践_index.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/myprojects/淘票票/核心技术/API限制/最佳实践/index.html.js"), meta: {"title":"最佳实践"} }],
  ["/series/myprojects/%E6%B7%98%E7%A5%A8%E7%A5%A8/%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/API%E9%99%90%E5%88%B6/", { loader: () => import(/* webpackChunkName: "series_myprojects_淘票票_核心技术_API限制_index.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/myprojects/淘票票/核心技术/API限制/index.html.js"), meta: {"title":"API限制"} }],
  ["/series/myprojects/%E6%B7%98%E7%A5%A8%E7%A5%A8/%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/", { loader: () => import(/* webpackChunkName: "series_myprojects_淘票票_核心技术_分布式锁_最佳实践_index.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/myprojects/淘票票/核心技术/分布式锁/最佳实践/index.html.js"), meta: {"title":"最佳实践"} }],
  ["/category/", { loader: () => import(/* webpackChunkName: "category_index.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/category/index.html.js"), meta: {"title":"分类","index":false} }],
  ["/category/java/", { loader: () => import(/* webpackChunkName: "category_java_index.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/category/java/index.html.js"), meta: {"title":"Java 分类","index":false} }],
  ["/category/linux/", { loader: () => import(/* webpackChunkName: "category_linux_index.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/category/linux/index.html.js"), meta: {"title":"Linux 分类","index":false} }],
  ["/category/bug/", { loader: () => import(/* webpackChunkName: "category_bug_index.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/category/bug/index.html.js"), meta: {"title":"BUG 分类","index":false} }],
  ["/category/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/", { loader: () => import(/* webpackChunkName: "category_前端开发_index.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/category/前端开发/index.html.js"), meta: {"title":"前端开发 分类","index":false} }],
  ["/category/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/", { loader: () => import(/* webpackChunkName: "category_基本概念_index.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/category/基本概念/index.html.js"), meta: {"title":"基本概念 分类","index":false} }],
  ["/category/%E6%95%B0%E6%8D%AE%E5%BA%93/", { loader: () => import(/* webpackChunkName: "category_数据库_index.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/category/数据库/index.html.js"), meta: {"title":"数据库 分类","index":false} }],
  ["/category/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/", { loader: () => import(/* webpackChunkName: "category_开发工具_index.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/category/开发工具/index.html.js"), meta: {"title":"开发工具 分类","index":false} }],
  ["/category/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1/", { loader: () => import(/* webpackChunkName: "category_软件设计_index.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/category/软件设计/index.html.js"), meta: {"title":"软件设计 分类","index":false} }],
  ["/tag/", { loader: () => import(/* webpackChunkName: "tag_index.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/tag/index.html.js"), meta: {"title":"标签","index":false} }],
  ["/tag/reactor/", { loader: () => import(/* webpackChunkName: "tag_reactor_index.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/tag/reactor/index.html.js"), meta: {"title":"标签: Reactor","index":false} }],
  ["/tag/spring-cloud-gateway/", { loader: () => import(/* webpackChunkName: "tag_spring-cloud-gateway_index.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/tag/spring-cloud-gateway/index.html.js"), meta: {"title":"标签: Spring Cloud Gateway","index":false} }],
  ["/tag/python/", { loader: () => import(/* webpackChunkName: "tag_python_index.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/tag/python/index.html.js"), meta: {"title":"标签: Python","index":false} }],
  ["/tag/windows/", { loader: () => import(/* webpackChunkName: "tag_windows_index.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/tag/windows/index.html.js"), meta: {"title":"标签: Windows","index":false} }],
  ["/tag/spring/", { loader: () => import(/* webpackChunkName: "tag_spring_index.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/tag/spring/index.html.js"), meta: {"title":"标签: Spring","index":false} }],
  ["/tag/linux/", { loader: () => import(/* webpackChunkName: "tag_linux_index.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/tag/linux/index.html.js"), meta: {"title":"标签: Linux","index":false} }],
  ["/tag/mysql/", { loader: () => import(/* webpackChunkName: "tag_mysql_index.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/tag/mysql/index.html.js"), meta: {"title":"标签: MySQL","index":false} }],
  ["/tag/vue/", { loader: () => import(/* webpackChunkName: "tag_vue_index.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/tag/vue/index.html.js"), meta: {"title":"标签: vue","index":false} }],
  ["/tag/ts/", { loader: () => import(/* webpackChunkName: "tag_ts_index.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/tag/ts/index.html.js"), meta: {"title":"标签: TS","index":false} }],
  ["/tag/vuepress-theme-reco/", { loader: () => import(/* webpackChunkName: "tag_vuepress-theme-reco_index.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/tag/vuepress-theme-reco/index.html.js"), meta: {"title":"标签: vuepress-theme-reco","index":false} }],
  ["/tag/js/", { loader: () => import(/* webpackChunkName: "tag_js_index.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/tag/js/index.html.js"), meta: {"title":"标签: JS","index":false} }],
  ["/tag/%E5%A4%9A%E7%BA%BF%E7%A8%8B/", { loader: () => import(/* webpackChunkName: "tag_多线程_index.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/tag/多线程/index.html.js"), meta: {"title":"标签: 多线程","index":false} }],
  ["/tag/redis/", { loader: () => import(/* webpackChunkName: "tag_redis_index.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/tag/redis/index.html.js"), meta: {"title":"标签: Redis","index":false} }],
  ["/tag/mysql/", { loader: () => import(/* webpackChunkName: "tag_mysql_index.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/tag/mysql/index.html.js"), meta: {"title":"标签: MYSQL","index":false} }],
  ["/tag//", { loader: () => import(/* webpackChunkName: "tag__index.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/tag/index.html.js"), meta: {"title":"标签: ","index":false} }],
  ["/tag/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/", { loader: () => import(/* webpackChunkName: "tag_算法设计_index.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/tag/算法设计/index.html.js"), meta: {"title":"标签: 算法设计","index":false} }],
  ["/tag/docker/", { loader: () => import(/* webpackChunkName: "tag_docker_index.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/tag/docker/index.html.js"), meta: {"title":"标签: Docker","index":false} }],
  ["/tag/idea/", { loader: () => import(/* webpackChunkName: "tag_idea_index.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/tag/idea/index.html.js"), meta: {"title":"标签: IDEA","index":false} }],
  ["/tag/git/", { loader: () => import(/* webpackChunkName: "tag_git_index.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/tag/git/index.html.js"), meta: {"title":"标签: Git","index":false} }],
  ["/tag/android/", { loader: () => import(/* webpackChunkName: "tag_android_index.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/tag/android/index.html.js"), meta: {"title":"标签: Android","index":false} }],
  ["/tag/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1/", { loader: () => import(/* webpackChunkName: "tag_软件设计_index.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/tag/软件设计/index.html.js"), meta: {"title":"标签: 软件设计","index":false} }],
  ["/article/", { loader: () => import(/* webpackChunkName: "article_index.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/article/index.html.js"), meta: {"title":"文章","index":false} }],
  ["/star/", { loader: () => import(/* webpackChunkName: "star_index.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/star/index.html.js"), meta: {"title":"星标","index":false} }],
  ["/timeline/", { loader: () => import(/* webpackChunkName: "timeline_index.html" */"F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/timeline/index.html.js"), meta: {"title":"时间轴","index":false} }],
]);
