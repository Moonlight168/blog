import comp from "F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/knowledge/Java/Java基础面试题/Java 新特性.html.vue"
const data = JSON.parse("{\"path\":\"/series/knowledge/Java/Java%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98/Java%20%E6%96%B0%E7%89%B9%E6%80%A7.html\",\"title\":\"Java 新特性\",\"lang\":\"zh-CN\",\"frontmatter\":{\"order\":11},\"git\":{},\"readingTime\":{\"minutes\":9.13,\"words\":2740},\"filePathRelative\":\"series/knowledge/Java/Java基础面试题/Java 新特性.md\",\"excerpt\":\"\\n<h2>Java 8 你知道有什么新特性？</h2>\\n<p>下面是 Java 8 主要新特性的整理表格，包含关键改进和示例说明：</p>\\n<table>\\n<thead>\\n<tr>\\n<th>特性名称</th>\\n<th>描述</th>\\n<th>示例或说明</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>Lambda 表达式</td>\\n<td>简化匿名内部类，支持函数式编程</td>\\n<td><code>(a, b) -&gt; a + b</code> 代替匿名类实现接口</td>\\n</tr>\\n<tr>\\n<td>函数式接口</td>\\n<td>仅含一个抽象方法的接口，可用<code>@FunctionalInterface</code>注解标记</td>\\n<td><code>Runnable</code>, <code>Comparator</code>, 或自定义接口 <code>@FunctionalInterface interface MyFunc { void run(); }</code></td>\\n</tr>\\n<tr>\\n<td>Stream API</td>\\n<td>提供链式操作处理集合数据，支持并行处理</td>\\n<td><code>list.stream().filter(x -&gt; x &gt; 0).collect(Collectors.toList())</code></td>\\n</tr>\\n<tr>\\n<td>Optional 类</td>\\n<td>封装可能为<code>null</code>的对象，减少空指针异常</td>\\n<td><code>Optional.ofNullable(value).orElse(\\\"default\\\")</code></td>\\n</tr>\\n<tr>\\n<td>方法引用</td>\\n<td>简化 Lambda 表达式，直接引用现有方法</td>\\n<td><code>System.out::println</code> 等价于 <code>x -&gt; System.out.println(x)</code></td>\\n</tr>\\n<tr>\\n<td>接口的默认方法与静态方法</td>\\n<td>接口可定义默认实现和静态方法，增强扩展性</td>\\n<td><code>interface A { default void print() { System.out.println(\\\"默认方法\\\"); } }</code></td>\\n</tr>\\n<tr>\\n<td>并行数组排序</td>\\n<td>使用多线程加速数组排序</td>\\n<td><code>Arrays.parallelSort(array)</code></td>\\n</tr>\\n<tr>\\n<td>重复注解</td>\\n<td>允许同一位置多次使用相同注解</td>\\n<td><code>@Repeatable</code> 注解配合容器注解使用</td>\\n</tr>\\n<tr>\\n<td>类型注解</td>\\n<td>注解可应用于更多位置（如泛型、异常等）</td>\\n<td><code>List&lt;@NonNull String&gt; list</code></td>\\n</tr>\\n<tr>\\n<td>CompletableFuture</td>\\n<td>增强异步编程能力，支持链式调用和组合操作</td>\\n<td><code>CompletableFuture.supplyAsync(() -&gt; \\\"result\\\").thenAccept(System.out::println)</code></td>\\n</tr>\\n</tbody>\\n</table>\"}")
export { comp, data }
