import comp from "F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/knowledge/Java/Java基础面试题/注解.html.vue"
const data = JSON.parse("{\"path\":\"/series/knowledge/Java/Java%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98/%E6%B3%A8%E8%A7%A3.html\",\"title\":\"注解\",\"lang\":\"zh-CN\",\"frontmatter\":{\"order\":7},\"git\":{},\"readingTime\":{\"minutes\":2.99,\"words\":896},\"filePathRelative\":\"series/knowledge/Java/Java基础面试题/注解.md\",\"excerpt\":\"\\n<h2>能讲一讲Java注解的原理吗？</h2>\\n<p>Java注解的本质是<strong>继承了<code>java.lang.annotation.Annotation</code>的特殊接口</strong>，其具体实现由Java运行时动态生成的代理类完成。</p>\\n<h3>核心原理流程</h3>\\n<ol>\\n<li><strong>注解定义</strong>：用<code>@interface</code>定义注解时，编译器会将其转换为继承<code>Annotation</code>的接口。例如：<div class=\\\"language-java line-numbers-mode\\\" data-highlighter=\\\"shiki\\\" data-ext=\\\"java\\\" style=\\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\\"><pre class=\\\"shiki shiki-themes one-light one-dark-pro vp-code\\\"><code class=\\\"language-java\\\"><span class=\\\"line\\\"><span style=\\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\\">public</span><span style=\\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\\"> @</span><span style=\\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\\">interface</span><span style=\\\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\\\"> MyAnnotation</span><span style=\\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\\">    String</span><span style=\\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\\"> value</span><span style=\\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\\">()</span><span style=\\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\\">}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\\">// 编译后等价于：</span></span>\\n<span class=\\\"line\\\"><span style=\\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\\">public</span><span style=\\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\\"> interface</span><span style=\\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\\"> MyAnnotation</span><span style=\\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\\"> extends</span><span style=\\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\\"> Annotation</span><span style=\\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\\">    String</span><span style=\\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\\"> value</span><span style=\\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\\">();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\\">}</span></span></code></pre>\\n<div class=\\\"line-numbers\\\" aria-hidden=\\\"true\\\" style=\\\"counter-reset:line-number 0\\\"><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div></div></div></li>\\n<li><strong>动态代理实现</strong>：运行时通过反射（如<code>clazz.getAnnotation(MyAnnotation.class)</code>）获取注解时，JVM会生成一个动态代理对象（实现该注解接口），代理类的核心是<code>AnnotationInvocationHandler</code>。</li>\\n<li><strong>属性值获取</strong>：调用注解的方法（如<code>annotation.value()</code>）时，实际会调用<code>AnnotationInvocationHandler.invoke()</code>方法，该方法从<code>memberValues</code>（一个存储注解属性值的Map）中获取对应值。</li>\\n<li><strong>属性值来源</strong>：<code>memberValues</code>的内容来源于Java常量池——注解的属性值在编译时被存入常量池，运行时JVM读取常量池信息，初始化<code>memberValues</code>。</li>\\n</ol>\"}")
export { comp, data }
