import comp from "F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/knowledge/Java/Java基础面试题/设计模式.html.vue"
const data = JSON.parse("{\"path\":\"/series/knowledge/Java/Java%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html\",\"title\":\"设计模式\",\"lang\":\"zh-CN\",\"frontmatter\":{\"order\":13},\"git\":{},\"readingTime\":{\"minutes\":3.95,\"words\":1185},\"filePathRelative\":\"series/knowledge/Java/Java基础面试题/设计模式.md\",\"excerpt\":\"\\n<h2>volatile和synchronized如何实现单例模式</h2>\\n<p>通过\\\"双重检查锁定\\\"（Double-Checked Locking）模式，结合<code>volatile</code>和<code>synchronized</code>，可实现线程安全、高性能的单例模式，代码如下：</p>\\n<div class=\\\"language-java line-numbers-mode\\\" data-highlighter=\\\"shiki\\\" data-ext=\\\"java\\\" style=\\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\\"><pre class=\\\"shiki shiki-themes one-light one-dark-pro vp-code\\\"><code class=\\\"language-java\\\"><span class=\\\"line\\\"><span style=\\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\\">public</span><span style=\\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\\"> class</span><span style=\\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\\"> Singleton</span><span style=\\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\\">    // 1. volatile修饰实例变量：禁止指令重排序，保证可见性</span></span>\\n<span class=\\\"line\\\"><span style=\\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\\">    private</span><span style=\\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\\"> static</span><span style=\\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\\"> volatile</span><span style=\\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\\"> Singleton</span><span style=\\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\\"> instance </span><span style=\\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\\">=</span><span style=\\\"--shiki-light:#986801;--shiki-dark:#D19A66\\\"> null</span><span style=\\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\\">;</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\\">    // 2. 私有构造方法：防止外部直接new创建对象</span></span>\\n<span class=\\\"line\\\"><span style=\\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\\">    private</span><span style=\\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\\"> Singleton</span><span style=\\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\\">()</span><span style=\\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\\"> {}</span></span>\\n<span class=\\\"line\\\"></span>\\n<span class=\\\"line\\\"><span style=\\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\\">    // 3. 静态获取实例方法：双重检查锁定</span></span>\\n<span class=\\\"line\\\"><span style=\\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\\">    public</span><span style=\\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\\"> static</span><span style=\\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\\"> Singleton</span><span style=\\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\\"> getInstance</span><span style=\\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\\">()</span><span style=\\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\\">        // 第一次检查：未加锁，快速判断实例是否已存在（避免频繁加锁）</span></span>\\n<span class=\\\"line\\\"><span style=\\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\\">        if</span><span style=\\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\\"> (instance </span><span style=\\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\\">==</span><span style=\\\"--shiki-light:#986801;--shiki-dark:#D19A66\\\"> null</span><span style=\\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\\">            // 加锁：仅当实例未创建时，才进入同步代码块（保证线程安全）</span></span>\\n<span class=\\\"line\\\"><span style=\\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\\">            synchronized</span><span style=\\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\\"> (</span><span style=\\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\\">Singleton</span><span style=\\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\\">.</span><span style=\\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\\">class</span><span style=\\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\\">                // 第二次检查：防止多个线程同时进入同步块后，重复创建实例</span></span>\\n<span class=\\\"line\\\"><span style=\\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\\">                if</span><span style=\\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\\"> (instance </span><span style=\\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\\">==</span><span style=\\\"--shiki-light:#986801;--shiki-dark:#D19A66\\\"> null</span><span style=\\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\\">                    instance </span><span style=\\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\\">=</span><span style=\\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\\"> new</span><span style=\\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\\"> Singleton</span><span style=\\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\\">(); </span><span style=\\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\\">// volatile禁止此步骤指令重排序</span></span>\\n<span class=\\\"line\\\"><span style=\\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\\">                }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\\">            }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\\">        return</span><span style=\\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\\"> instance;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\\">}</span></span></code></pre>\\n<div class=\\\"line-numbers\\\" aria-hidden=\\\"true\\\" style=\\\"counter-reset:line-number 0\\\"><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div></div></div>\"}")
export { comp, data }
