import comp from "F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/knowledge/Java/Java基础面试题/String、StringBuffer、StringBuilder的区别和联系.html.vue"
const data = JSON.parse("{\"path\":\"/series/knowledge/Java/Java%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98/String%E3%80%81StringBuffer%E3%80%81StringBuilder%E7%9A%84%E5%8C%BA%E5%88%AB%E5%92%8C%E8%81%94%E7%B3%BB.html\",\"title\":\"String、StringBuffer、StringBuilder的区别和联系\",\"lang\":\"zh-CN\",\"frontmatter\":{\"order\":10},\"git\":{},\"readingTime\":{\"minutes\":1.54,\"words\":462},\"filePathRelative\":\"series/knowledge/Java/Java基础面试题/String、StringBuffer、StringBuilder的区别和联系.md\",\"excerpt\":\"\\n<ol>\\n<li><strong>可变性</strong>：<code>String</code>是不可变的（Immutable），一旦创建，内容无法修改，每次修改都会生成一个新的对象。<code>StringBuilder</code>和<code>StringBuffer</code>是可变的（Mutable），可以直接对字符串内容进行修改而不会创建新对象。</li>\\n<li><strong>线程安全性</strong>：<code>String</code>因为不可变，天然线程安全。<code>StringBuilder</code>不是线程安全的，适用于单线程环境。<code>StringBuffer</code>是线程安全的，其方法通过<code>synchronized</code>关键字实现同步，适用于多线程环境。</li>\\n<li><strong>性能</strong>：<code>String</code>性能最低，尤其是在频繁修改字符串时会生成大量临时对象，增加内存开销和垃圾回收压力。<code>StringBuilder</code>性能最高，因为它没有线程安全的开销，适合单线程下的字符串操作。<code>StringBuffer</code>性能略低于<code>StringBuilder</code>，因为它的线程安全机制引入了同步开销。</li>\\n<li><strong>使用场景</strong>：如果字符串内容固定或不常变化，优先使用<code>String</code>。如果需要频繁修改字符串且在单线程环境下，使用<code>StringBuilder</code>。如果需要频繁修改字符串且在多线程环境下，使用<code>StringBuffer</code>。</li>\\n</ol>\"}")
export { comp, data }
