import comp from "F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/knowledge/数据库/redis.html.vue"
const data = JSON.parse("{\"path\":\"/series/knowledge/%E6%95%B0%E6%8D%AE%E5%BA%93/redis.html\",\"title\":\"Redis\",\"lang\":\"zh-CN\",\"frontmatter\":{\"title\":\"Redis\",\"date\":\"2025-05-21T00:00:00.000Z\",\"icon\":\"/assets/icon/redis.png\"},\"git\":{},\"readingTime\":{\"minutes\":2.57,\"words\":770},\"filePathRelative\":\"series/knowledge/数据库/redis.md\",\"excerpt\":\"<h2>Redis 缓存穿透、缓存雪崩和缓存击穿分别是什么，如何解决？</h2>\\n<p><strong>回答：</strong></p>\\n<ul>\\n<li><strong>缓存穿透</strong>：指查询一个一定不存在的数据，由于缓存没有命中，就会去查询数据库，而数据库也没有该数据，每次请求都会打到数据库，可能导致数据库压力过大甚至崩溃。解决方法可以使用布隆过滤器，在查询前先通过布隆过滤器判断数据是否存在，不存在就直接返回，不会查询数据库；也可以对查询结果为空的情况也进行缓存，设置较短的过期时间。</li>\\n<li><strong>缓存雪崩</strong>：指在某一时刻，大量的缓存同时过期，导致大量请求直接打到数据库，造成数据库压力过大。可以通过设置不同的过期时间，避免大量缓存同时过期；或者使用互斥锁，在缓存失效时，只允许一个线程去查询数据库并更新缓存，其他线程等待。</li>\\n<li><strong>缓存击穿</strong>：指一个热点 key，在缓存过期的瞬间，大量的请求同时到来，这些请求都会去查询数据库，造成数据库压力增大。可以使用互斥锁，保证在缓存过期时，只有一个请求去查询数据库并更新缓存；也可以将热点数据设置为永不过期，或者使用二级缓存，第一层缓存失效时，从第二层缓存获取数据。</li>\\n</ul>\"}")
export { comp, data }
