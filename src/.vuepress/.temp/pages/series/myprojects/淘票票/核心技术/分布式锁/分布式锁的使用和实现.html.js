import comp from "F:/MyBlogSite/vuepress-theme-hope/my-docs/src/.vuepress/.temp/pages/series/myprojects/淘票票/核心技术/分布式锁/分布式锁的使用和实现.html.vue"
const data = JSON.parse("{\"path\":\"/series/myprojects/%E6%B7%98%E7%A5%A8%E7%A5%A8/%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E7%9A%84%E4%BD%BF%E7%94%A8%E5%92%8C%E5%AE%9E%E7%8E%B0.html\",\"title\":\"淘票票分布式锁实战：基于Redisson与AOP的高并发防护体系\",\"lang\":\"zh-CN\",\"frontmatter\":{},\"git\":{},\"readingTime\":{\"minutes\":24.11,\"words\":7233},\"filePathRelative\":\"series/myprojects/淘票票/核心技术/分布式锁/分布式锁的使用和实现.md\",\"excerpt\":\"\\n<p>在淘票票高并发场景中，日均千万级订单支付和百万级电影票秒杀容易出现\\\"重复支付\\\"\\\"库存超卖\\\"等问题。分布式锁是解决跨服务并发冲突的核心技术。我们最终采用<strong>Redisson+AOP</strong>方案：Redisson保障分布式锁的可靠性，AOP实现业务与锁逻辑解耦，开发者只需一行注解即可为核心接口添加并发防护。本文将详细解析该方案的设计思路、实现细节与最佳实践。</p>\\n<h2>一、为什么淘票票需要分布式锁？</h2>\\n<p>分布式系统中，多个服务实例共享同一资源（如订单、库存）时，本地锁（<code>synchronized</code>、<code>ReentrantLock</code>）只能控制单实例内的并发，<a href=\\\"/blogs/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/%E8%B7%A8%E5%AE%9E%E4%BE%8B.html\\\" target=\\\"_blank\\\">跨实例</a>的并发冲突成为“重灾区”。3类典型问题：</p>\"}")
export { comp, data }
